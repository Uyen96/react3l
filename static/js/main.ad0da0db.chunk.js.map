{"version":3,"sources":["core/config/consts.ts","core/config/global.ts","core/config/config-tests.ts","config/i18next.ts","config/route-consts.ts","core/helpers/json.ts","config/menu.ts","layouts/DefaultLayout/DefaultLayout.tsx","views/DefaultViews/ProvinceView/ProvinceDetail/ProvinceDetail.tsx","core/models/Cloneable.ts","core/models/Model.ts","core/models/Search.ts","core/services/CRUDService.ts","core/helpers/debounce.ts","core/filters/Filter.ts","core/services/RouterService.ts","core/filters/StringFilter.ts","models/ProvinceSearch.ts","config/api-consts.ts","core/repositories/Repository.ts","core/helpers/http.ts","models/Ward.ts","models/District.ts","models/Province.ts","views/DefaultViews/ProvinceView/ProvinceMaster/ProvinceMasterRepository.ts","views/DefaultViews/ProvinceView/ProvinceMaster/ProvinceMaster.tsx","views/DefaultViews/ProvinceView/ProvinceView.tsx","config/routes.tsx","core/components/App/App.tsx","core/components/AppLoading/AppLoading.tsx","service-worker.ts","index.tsx","core/helpers/translate.ts","config/consts.ts"],"names":["defaultActions","add","APP_TITLE","process","DEFAULT_TAKE","INPUT_DEBOUNCE_TIME","parseInt","DATE_FORMAT","TIME_FORMAT","initialGlobalState","language","fallbackLanguage","loading","title","i18n","i18nextConfig","resources","lng","fallbackLng","ns","defaultNS","nsSeparator","keySeparator","interpolation","escapeValue","nestingSuffixEscaped","prefix","suffix","PROVINCE_ROUTE","unflatten","jsonTable","result","Object","keys","forEach","key","namespaces","split","lastIndex","length","current","namespace","index","hasKey","hasOwnProperty","isLastIndex","sort","json","menu","path","icon","Header","Layout","Sider","Content","Footer","SubMenu","Menu","DefaultLayout","props","route","className","contentClassName","headerClassName","mainClassName","useTranslation","translate","classNames","theme","mode","renderMenu","map","item","Fragment","to","activeClassName","exact","role","antIcon","type","matIcon","children","renderRoutes","routes","defaultProps","withRouter","ProvinceDetail","Cloneable","model","instance","assign","Model","errors","Search","skip","take","orderBy","orderType","search","toUpperCase","startsWith","undefined","field","sorter","order","crudService","setModel","handleSetInputValue","React","useCallback","value","clone","handleDebounceInputValue","tFunction","debounceTime","lodashDebounce","debounce","handleChangeSimpleField","event","target","handleUpdateDateField","moment","id","t","useMemo","v4","setValue","v","handleDelete","newValue","filter","handleAdd","newContent","Array","reference","baseRoute","getDetail","saveDetail","onSavingError","useState","setT","useParams","setLoading","isDetail","history","useHistory","handleGoBack","push","join","handleSave","a","async","newT","useEffect","then","finally","list","onError","enums","setEnums","catch","setSearch","masterList","masterCount","tSearch","setList","total","setTotal","handleEdit","toString","handleReset","newSearch","entries","filterKey","handleFilter","Promise","all","getList","Filter","defaultSearch","queryString","QueryString","parse","setOrderType","isIdFilter","endsWith","k","match","Date","o","filterValue","isMomentObject","format","stringify","flatten","parentKey","combinedKey","defaultTSearch","setTSearch","useLocation","pathname","parseSearch","newTSearch","replace","stringifySearch","this","StringFilter","startWith","notStartWith","endWith","notEndWith","equal","notEqual","contain","notContain","ProvinceSearch","code","API_PROVINCE_MASTER_ROUTE","Repository","config","requestInterceptor","responseInterceptor","http","axios","create","interceptors","request","use","response","createHttpService","_defaultRequestInterceptor","_defaultResponseInterceptor","baseURL","defaults","Ward","name","districtId","district","ward","District","provinceId","province","wards","Province","districts","provinceMasterRepository","count","provinceFilter","post","kebabCase","data","get","setBaseURL","ProvinceMaster","useMaster","provinces","dataSource","rowKey","component","ProvinceView","App","useGlobal","document","AppLoading","spinning","Boolean","window","location","hostname","i18next","initReactI18next","init","initialI18NextConfig","setGlobal","addResource","changeLanguage","root","getElementById","hasChildNodes","ReactDOM","hydrate","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ad0da0db.chunk.js","sourcesContent":["import {FormProps} from 'antd/lib/form';\nimport {translate} from 'core/helpers/translate';\nimport {AntSortType, TableKeys} from 'react3l';\n\nexport const defaultKeys: TableKeys = {\n  index: translate('general.keys.index'),\n  actions: translate('general.keys.actions'),\n  checkbox: translate('general.keys.checkbox'),\n  expand: translate('general.keys.expand'),\n};\n\nexport const defaultActions = {\n  add: translate('general.actions.add'),\n};\n\nexport const __DEV__: boolean = process.env.NODE_ENV === 'development';\n\nexport const BASE_URL: string = __DEV__ ? window.location.origin : process.env.REACT_APP_BASE_URL;\n\nexport const APP_TITLE: string = process.env.REACT_APP_TITLE ?? '';\n\nexport const formItemLayout: FormProps = {\n  labelCol: {\n    xs: {span: 24},\n    sm: {span: 8},\n  },\n  wrapperCol: {\n    xs: {span: 24},\n    sm: {span: 16},\n  },\n};\n\nexport const antSortType: AntSortType = {\n  ASC: 'ascend',\n  DESC: 'descend',\n};\n\nexport const DEFAULT_TAKE: number = 10;\n\nexport const INPUT_DEBOUNCE_TIME: number = parseInt(process.env.INPUT_DEBOUNCE_TIME, 10) ?? 400;\n\nexport const DATE_FORMAT: string = 'YYYY-MM-DD';\n\nexport const TIME_FORMAT: string = 'HH:mm:ss';\n\nexport const DATE_TIME_FORMAT: string = `${DATE_FORMAT} ${TIME_FORMAT}`;\n","import {APP_TITLE} from 'core/config/consts';\n\nexport type LanguageType = 'en' | 'vi';\n\nexport interface GlobalState {\n  language?: LanguageType;\n\n  fallbackLanguage?: LanguageType;\n\n  loading?: boolean;\n\n  title?: string;\n}\n\nconst initialGlobalState: GlobalState = {\n  language: 'vi',\n  fallbackLanguage: 'vi',\n  loading: true,\n  title: APP_TITLE,\n};\n\nexport default initialGlobalState;\n","import initialGlobalState, {GlobalState} from 'core/config/global';\nimport i18n from 'i18next';\nimport {initReactI18next} from 'react-i18next';\nimport React from 'reactn';\n\nexport async function configTests() {\n  await Promise.all([\n    React.setGlobal<GlobalState>(initialGlobalState),\n    i18n\n      .use(initReactI18next)\n      .init({\n        fallbackLng: 'en',\n        // have a common namespace used around the full app\n        ns: ['translations'],\n        defaultNS: 'translations',\n        debug: false,\n        interpolation: {\n          escapeValue: false, // not needed for react!!\n        },\n      }),\n  ]);\n}\n\nexport default i18n;\n","import initialGlobalState from 'core/config/global';\nimport {InitOptions} from 'i18next';\n\nconst i18nextConfig: InitOptions = {\n  resources: {},\n  lng: initialGlobalState.language,\n  fallbackLng: initialGlobalState.fallbackLanguage,\n  ns: '',\n  defaultNS: '',\n  nsSeparator: false,\n  keySeparator: '.',\n  interpolation: {\n    escapeValue: false,\n    nestingSuffixEscaped: '.',\n    prefix: '{{',\n    suffix: '}}',\n  },\n};\n\nexport default i18nextConfig;\n","export default 'route-consts';\n\nexport const ROOT_ROUTE: string = '/';\n\nexport const ACCOUNT_ROUTE: string = '/accounts';\nexport const DISTRICT_ROUTE: string = '/districts';\nexport const GROUP_ROUTE: string = '/groups';\nexport const ORDER_CONTENT_ROUTE: string = '/orderContents';\nexport const ORDER_ROUTE: string = '/orders';\nexport const PROVINCE_ROUTE: string = '/provinces';\nexport const WARD_ROUTE: string = '/wards';\n","export interface JSONObject {\n  [key: string]: string | number | boolean | null | undefined | JSONObject;\n}\n\nexport function sort(json: JSONObject) {\n  const result: JSONObject = {};\n  if (json) {\n    Object\n      .keys(json)\n      .sort()\n      .forEach((key: string) => {\n        result[key] = json[key];\n        if (typeof result[key] === 'object') {\n          result[key] = sort(result[key] as JSONObject);\n        }\n      });\n  }\n  return result;\n}\n\nexport function unflatten(jsonTable: { [key: string]: string }): JSONObject {\n  if (jsonTable) {\n    const result: { [key: string]: any } = {};\n    Object\n      .keys(jsonTable)\n      .forEach((key: string) => {\n        const namespaces: string[] = key.split('.');\n        const lastIndex: number = namespaces.length - 1;\n        let current: { [key: string]: any } = result;\n\n        namespaces.forEach((namespace: string, index: number) => {\n          const hasKey: boolean = current.hasOwnProperty(namespace);\n          const isLastIndex = index === lastIndex;\n          if (!hasKey) {\n            if (isLastIndex) {\n              current[namespace] = jsonTable[key];\n            } else {\n              current[namespace] = {};\n            }\n          }\n          if (typeof current[namespace] === 'object') {\n            current = current[namespace];\n          }\n        });\n      });\n    return sort(result);\n  }\n  return jsonTable;\n}\n\nexport function flatten(json: { [key: string]: any }, parentKey: string = '') {\n  if (json) {\n    let result: { [key: string]: string } = {};\n    Object\n      .keys(json)\n      .forEach((key: string) => {\n        const combinedKey: string = parentKey ? `${parentKey}.${key}` : key;\n        if (typeof json[key] !== 'object') {\n          result = {\n            ...result,\n            [combinedKey]: json[key],\n          };\n        } else {\n          result = {\n            ...result,\n            ...flatten(json[key], combinedKey),\n          };\n        }\n      });\n    return result;\n  }\n  return json;\n}\n","import {PROVINCE_ROUTE} from 'config/route-consts';\nimport {translate} from 'core/helpers';\nimport {RouteConfig} from 'react-router-config';\n\nexport const menu: RouteConfig[] = [\n  {\n    path: PROVINCE_ROUTE,\n    title: translate('menu.province'),\n    icon: 'fa fa-building',\n  },\n];\n","import Icon from 'antd/lib/icon';\nimport Layout from 'antd/lib/layout';\nimport Menu from 'antd/lib/menu';\nimport classNames from 'classnames';\nimport {menu} from 'config/menu';\nimport React from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {renderRoutes, RouteConfig, RouteConfigComponentProps} from 'react-router-config';\nimport {NavLink, Switch, withRouter} from 'react-router-dom';\nimport './DefaultLayout.scss';\n\nconst {Header, Sider, Content, Footer} = Layout;\n\nconst {SubMenu} = Menu;\n\nexport interface DefaultLayoutProps extends RouteConfigComponentProps {\n  className?: string;\n\n  headerClassName?: string;\n\n  contentClassName?: string;\n\n  mainClassName?: string;\n\n  title?: string;\n\n  menu?: RouteConfig[];\n}\n\nfunction renderMenu(menu: RouteConfig[], translate: (key: string, data?: any) => string) {\n  return menu.map((item: RouteConfig) => (\n    <React.Fragment key={item.path as string}>\n      <NavLink\n        to={item.path as string}\n        className={classNames('ant-menu-item', 'sidebar-link')}\n        activeClassName=\"ant-menu-item-selected\"\n        exact={item.exact}\n        role=\"menuitem\"\n      >\n        {item.antIcon && (\n          <Icon type={item.antIcon}/>\n        )}\n        {item.matIcon && (\n          <i className=\"material-icons\">{item.matIcon}</i>\n        )}\n        {item.icon && (\n          <i className={item.icon}/>\n        )}\n        {translate(item.title)}\n      </NavLink>\n      {item?.children && (\n        <SubMenu title={item.title}>\n          {renderMenu(item.children, translate)}\n        </SubMenu>\n      )}\n    </React.Fragment>\n  ));\n}\n\nfunction DefaultLayout(props: DefaultLayoutProps) {\n  const {route, className, contentClassName, headerClassName, mainClassName, menu, title} = props;\n  const [translate] = useTranslation();\n\n  return (\n    <Layout className={classNames('default-layout', className)}>\n      <Header className={headerClassName}>\n        <div className=\"logo\">\n          {title}\n        </div>\n      </Header>\n      <Layout className={mainClassName}>\n        <Sider theme=\"light\">\n          <Menu mode=\"inline\" theme=\"light\">\n            {renderMenu(menu, translate)}\n          </Menu>\n        </Sider>\n        <Content className={contentClassName}>\n          <Switch>\n            {renderRoutes(route?.routes)}\n          </Switch>\n          <Footer/>\n        </Content>\n      </Layout>\n    </Layout>\n  );\n}\n\nDefaultLayout.defaultProps = {\n  menu,\n};\n\nexport default withRouter(DefaultLayout);\n","import React from 'react';\nimport 'views/DefaultViews/ProvinceView/ProvinceDetail/ProvinceDetail.scss';\n\nfunction ProvinceDetail() {\n  return (\n    <>\n    </>\n  );\n}\n\nexport default ProvinceDetail;\n","import {PureModelData} from 'core/types';\n\nexport class Cloneable {\n  public static clone<T extends Cloneable>(model?: PureModelData<T>): T {\n    const instance: T = new Cloneable() as T;\n    if (typeof model !== 'undefined' && model !== null) {\n      Object.assign(instance, model);\n    }\n    return instance;\n  }\n}\n","import {ErrorMap} from '../types';\nimport {Cloneable} from './Cloneable';\n\nexport class Model extends Cloneable {\n  public errors?: ErrorMap<Model>;\n\n  public key?: string | number;\n\n  [key: string]: any;\n\n  constructor(model?: Model) {\n    super();\n    if (model !== null && typeof model === 'object') {\n      Object.assign(this, model);\n    }\n  }\n}\n","import {SorterResult} from 'antd/lib/table';\nimport nameof from 'ts-nameof.macro';\nimport {antSortType, DEFAULT_TAKE} from '../config';\nimport {Cloneable} from './Cloneable';\nimport {Model} from './Model';\n\nexport class Search extends Cloneable {\n  public static setOrderType(search: Search, orderType: string | null | undefined | boolean) {\n    if (typeof orderType === 'undefined') {\n      search.orderType = undefined;\n      return;\n    }\n    if (typeof orderType === 'string') {\n      if (orderType.toUpperCase().startsWith(nameof(antSortType.ASC))) {\n        search.orderType = nameof(antSortType.ASC);\n        return;\n      }\n      search.orderType = nameof(antSortType.DESC);\n      return;\n    }\n    if (typeof orderType === 'boolean') {\n      if (orderType) {\n        return nameof(antSortType.ASC);\n      }\n      search.orderType = nameof(antSortType.DESC);\n      return nameof(antSortType.DESC);\n    }\n    search.orderType = undefined;\n  }\n\n  public static getOrderType(search: Search): 'ascend' | 'descend' | undefined {\n    if (search.orderType) {\n      if (search.orderType === nameof(antSortType.ASC)) {\n        return 'ascend';\n      }\n      return 'descend';\n    }\n    return undefined;\n  }\n\n  public static getOrderTypeForTable<T extends Model>(field: string, sorter: SorterResult<T>) {\n    return (field === sorter.field) ? sorter.order : undefined;\n  }\n\n  public skip?: number = 0;\n\n  public take?: number = DEFAULT_TAKE;\n\n  public orderBy?: string;\n\n  public orderType?: string;\n}\n","import {Moment} from 'moment';\nimport {join} from 'path';\nimport React from 'react';\nimport {useHistory, useParams} from 'react-router-dom';\nimport {DetailParams} from 'react3l';\nimport nameof from 'ts-nameof.macro';\nimport v4 from 'uuid/v4';\nimport {DEFAULT_TAKE, defaultKeys} from '../config';\nimport {Filter, IdFilter} from '../filters';\nimport {debounce} from '../helpers';\nimport {Model, Search} from '../models';\n\nexport class CRUDService {\n  public useChangeHandlers<T extends Model>(model?: T, setModel?: (t: T) => void): [\n    (field: string) => (value) => void,\n    (field: string) => (value) => void,\n    (field: string) => (value) => void,\n  ] {\n    const handleSetInputValue = React.useCallback(\n      (field: string, value: string | number | boolean | null | undefined) => {\n        setModel(Model.clone<T>({\n          ...model,\n          [field]: value,\n        }));\n      },\n      [model, setModel],\n    );\n\n    const handleDebounceInputValue = React.useCallback(\n      debounce(handleSetInputValue),\n      [handleSetInputValue],\n    );\n\n    const handleChangeSimpleField = React.useCallback(\n      (field: string, debounce: boolean = false) => {\n        return (event: React.ChangeEvent<HTMLInputElement> | number | string | boolean) => {\n          if (typeof event === 'object') {\n            if ('target' in event) {\n              if (debounce) {\n                return handleDebounceInputValue(field, event.target.value);\n              }\n              return handleSetInputValue(field, event.target.value);\n            }\n            if ('format' in event) {\n              setModel(Model.clone<T>({\n                ...model,\n                [field]: event,\n              }));\n            }\n          }\n          if (debounce) {\n            return handleDebounceInputValue(field, event);\n          }\n          return handleSetInputValue(field, event);\n        };\n      },\n      [handleDebounceInputValue, handleSetInputValue, model, setModel],\n    );\n\n    const handleUpdateDateField = React.useCallback(\n      (field: string) => {\n        return (moment: Moment) => {\n          setModel(Model.clone<T>({\n            ...model,\n            [field]: moment,\n          }));\n        };\n      },\n      [model, setModel],\n    );\n\n    const handleChangeObjectField = React.useCallback(\n      (field: string) => {\n        return (id?: number | string | null, t?: T) => {\n          setModel(Model.clone<T>({\n            ...model,\n            [field]: t,\n            [`${field}Id`]: id,\n          }));\n        };\n      },\n      [model, setModel],\n    );\n\n    return [\n      handleChangeSimpleField,\n      handleChangeObjectField,\n      handleUpdateDateField,\n    ];\n  }\n\n  public useContentTable<T extends Model, TContent extends Model>(\n    model: T,\n    setModel: (t: T) => void,\n    field: string,\n  ): [\n    TContent[],\n    (v: TContent[]) => void,\n    () => void,\n    (id: number) => () => void,\n  ] {\n    const value: TContent[] = React.useMemo(\n      () => {\n        if (model[field]) {\n          model[field]?.forEach((t: T) => {\n            if (!t?.key) {\n              if (t?.id) {\n                t.key = t.id;\n              } else {\n                t.key = v4();\n              }\n            }\n          });\n          return model[field];\n        }\n        return [];\n      },\n      [field, model],\n    );\n\n    const setValue = React.useCallback(\n      (v: TContent[]) => {\n        setModel(Model.clone<T>({\n          ...model,\n          [field]: v,\n        }));\n      },\n      [field, model, setModel],\n    );\n\n    const handleDelete = React.useCallback(\n      (id: number) => {\n        return () => {\n          const newValue: TContent[] = value.filter((v: TContent) => v.id !== id);\n          setValue(newValue);\n        };\n      },\n      [value, setValue],\n    );\n\n    const handleAdd = React.useCallback(\n      () => {\n        const newContent: TContent = new Model() as TContent;\n        newContent.key = v4();\n        if (value instanceof Array) {\n          setValue([\n            ...value,\n            newContent,\n          ]);\n        } else {\n          setValue([\n            newContent,\n          ]);\n        }\n      },\n      [setValue, value],\n    );\n\n    return [value, setValue, handleAdd, handleDelete];\n  }\n\n  public useDefaultList<T1 extends Model, T2 extends Model>(model: T1, field: string): T2[] {\n    return React.useMemo(\n      () => {\n        const reference: T2 = model[field];\n        if (reference) {\n          return [reference];\n        }\n        return [];\n      },\n      [field, model],\n    );\n  }\n\n  public useDetail<T extends Model>(\n    baseRoute: string,\n    getDetail?: (t?: T) => Promise<T>,\n    saveDetail?: (t?: T) => Promise<T>,\n    onSavingError?: (error: Error) => void,\n  ): [\n    T,\n    (t: T) => void,\n    boolean,\n    (loading: boolean) => void,\n    boolean,\n    () => void,\n    () => void,\n  ] {\n    const [t, setT] = React.useState<T>(new Model() as T);\n    const {id} = useParams<DetailParams>();\n    const [loading, setLoading] = React.useState<boolean>(false);\n    const isDetail: boolean = id !== nameof(defaultKeys.add);\n    const history = useHistory();\n\n    const handleGoBack = React.useCallback(\n      () => {\n        history.push(join(baseRoute));\n      },\n      [baseRoute, history],\n    );\n\n    const handleSave = React.useCallback(\n      async () => {\n        setLoading(true);\n        try {\n          const newT: T = await saveDetail(t);\n          if (t?.id) {\n            setT(newT);\n          } else {\n            history.push(join(baseRoute, newT.id));\n          }\n        } catch (error) {\n          if (onSavingError) {\n            onSavingError(error);\n          }\n        }\n        setLoading(false);\n      },\n      [baseRoute, history, onSavingError, saveDetail, t],\n    );\n\n    React.useEffect(\n      () => {\n        if (!!getDetail && isDetail) {\n          setLoading(true);\n          const t: T = Model.clone<Model>({\n            id,\n          }) as T;\n          getDetail(t)\n            .then((t: T) => {\n              setT(t);\n            })\n            .finally(() => {\n              setLoading(false);\n            });\n        }\n      },\n      [getDetail, id, isDetail],\n    );\n\n    return [t, setT, loading, setLoading, isDetail, handleGoBack, handleSave];\n  }\n\n  public useEnumList<T extends Model>(\n    list: () => Promise<T[]>,\n    onError?: (error: Error) => void,\n  ): [T[], (list: T[]) => void, boolean] {\n    const [enums, setEnums] = React.useState<T[]>([]);\n    const [loading, setLoading] = React.useState<boolean>(false);\n    React.useEffect(\n      () => {\n        setLoading(true);\n        list()\n          .then((enums: T[]) => {\n            setEnums(enums);\n          })\n          .catch(onError)\n          .finally(\n            () => {\n              setLoading(false);\n            },\n          );\n      },\n      [list, onError],\n    );\n    return [enums, setEnums, loading];\n  }\n\n  public useFilter<TSearch extends Search, P extends keyof TSearch>(\n    search: TSearch,\n    setSearch: (search: TSearch) => void,\n    field: P,\n  ): [\n    TSearch[P],\n    (filter: TSearch[P]) => void,\n  ] {\n    const filter: TSearch[P] = search[field];\n\n    const setFilter = React.useCallback(\n      (filter: TSearch[P]) => {\n        setSearch(Search.clone<TSearch>({\n          ...search,\n          [field]: filter,\n        }));\n      },\n      [field, search, setSearch],\n    );\n\n    return [filter, setFilter];\n  }\n\n  public useMaster<T extends Model, TSearch extends Search>(\n    baseRoute: string,\n    masterList: (tSearch?: TSearch) => Promise<T[]>,\n    masterCount: (tSearch?: TSearch) => Promise<number>,\n    tSearch: new () => TSearch,\n  ): [\n    T[],\n    TSearch,\n    (tSearch: TSearch) => void,\n    number,\n    boolean,\n    (loading: boolean) => void,\n    () => void,\n    () => void,\n    (id: number) => () => void,\n    (field: string) => (filter: Filter) => void,\n  ] {\n    const [search, setSearch] = React.useState<TSearch>(new tSearch());\n    const [list, setList] = React.useState<T[]>([]);\n    const [loading, setLoading] = React.useState<boolean>(false);\n    const [total, setTotal] = React.useState<number>(0);\n    const history = useHistory();\n\n    const handleAdd = React.useCallback(\n      () => {\n        history.push(join(baseRoute, nameof(defaultKeys.add)));\n      },\n      [history, baseRoute],\n    );\n\n    const handleEdit = React.useCallback(\n      (id: number) => {\n        return () => {\n          history.push(join(baseRoute, id.toString()));\n        };\n      },\n      [baseRoute, history],\n    );\n\n    const handleReset = React.useCallback(\n      () => {\n        const newSearch: TSearch = Search.clone<TSearch>(search);\n        Object\n          .entries(newSearch)\n          .forEach(([key, value]) => {\n            switch (key) {\n              case nameof(newSearch.skip):\n                newSearch.skip = 0;\n                break;\n\n              case nameof(newSearch.take):\n                newSearch.take = DEFAULT_TAKE;\n                break;\n\n              case nameof(newSearch.orderBy):\n                newSearch.orderBy = undefined;\n                break;\n\n              case nameof(newSearch.orderType):\n                newSearch.orderBy = undefined;\n                break;\n\n              default:\n                if (typeof value === 'object' && value !== null) {\n                  Object\n                    .entries(value)\n                    .forEach(([filterKey]) => {\n                      delete value[filterKey];\n                    });\n                }\n                break;\n            }\n          });\n        setSearch(newSearch);\n      },\n      [search, setSearch],\n    );\n\n    const handleFilter = React.useCallback(\n      (field: string) => {\n        return (filter: Filter) => {\n          setSearch(Search.clone<TSearch>({\n            ...search,\n            [field]: filter,\n          }));\n        };\n      },\n      [search, setSearch],\n    );\n\n    React.useEffect(\n      () => {\n        setLoading(true);\n        Promise.all([\n          masterList(search),\n          masterCount(search),\n        ])\n          .then(([list, total]: [T[], number]) => {\n            setList(list);\n            setTotal(total);\n          })\n          .finally(() => {\n            setLoading(false);\n          });\n      },\n      [masterCount, masterList, search],\n    );\n\n    return [\n      list,\n      search,\n      setSearch,\n      total,\n      loading,\n      setLoading,\n      handleAdd,\n      handleReset,\n      handleEdit,\n      handleFilter,\n    ];\n  }\n\n  public usePreloadList<T extends Model, TSearch extends Search>(\n    getList: (search: TSearch) => Promise<T[]>,\n    id: IdFilter,\n  ): T[] {\n    const [list, setList] = React.useState<T[]>([]);\n\n    React.useEffect(\n      () => {\n        getList({id, ...new Search() as TSearch})\n          .then(setList);\n      },\n      [getList, id],\n    );\n\n    return list;\n  }\n}\n\nexport const crudService: CRUDService = new CRUDService();\n","import {INPUT_DEBOUNCE_TIME} from 'core/config/consts';\nimport lodashDebounce from 'lodash/debounce';\n\nexport function debounce(tFunction: (...params: any[]) => any, debounceTime: number = INPUT_DEBOUNCE_TIME) {\n  return lodashDebounce(tFunction, debounceTime);\n}\n","export class Filter {\n\n  constructor(filter?: Filter) {\n    if (!!filter) {\n      Object.assign(this, filter);\n    }\n  }\n}\n","import moment from 'moment';\nimport QueryString from 'query-string';\nimport React from 'react';\nimport {useHistory, useLocation} from 'react-router-dom';\nimport nameof from 'ts-nameof.macro';\nimport {DATE_FORMAT, DEFAULT_TAKE} from '../config';\nimport {flatten, JSONObject, unflatten} from '../helpers';\nimport {Search} from '../models';\n\nexport class RouterService {\n  public parseSearch<TSearch extends Search>(search: string, defaultSearch: TSearch): TSearch {\n    const queryString: JSONObject = unflatten(QueryString.parse(search) as { [key: string]: string });\n\n    Object\n      .entries(queryString)\n      .forEach(([key, value]) => {\n        switch (key) {\n          case nameof(defaultSearch.skip):\n            if (typeof value === 'string') {\n              defaultSearch.skip = parseInt(value, 10) ?? 0;\n            }\n            break;\n\n          case nameof(defaultSearch.take):\n            if (typeof value === 'string') {\n              defaultSearch.take = parseInt(value, 10) ?? DEFAULT_TAKE;\n            }\n            break;\n\n          case nameof(defaultSearch.orderType):\n            if (typeof value === 'string') {\n              Search.setOrderType(defaultSearch, value);\n            }\n            break;\n\n          default:\n            if (typeof value === 'object' && value !== null) {\n              const isIdFilter: boolean = key.endsWith('Id') ?? key === 'id';\n              Object\n                .entries(value)\n                .forEach(([k, v]) => {\n                  if (typeof v === 'string') {\n                    if (isIdFilter) {\n                      if (v.match(/^[0-9]+$/g)) {\n                        defaultSearch[key][k] = parseInt(v as string, 10);\n                        return;\n                      }\n                    }\n                    if (v.match(/^(20|19)[0-9]{2}-[0-9]{2}-[0-9]{2}/)) {\n                      defaultSearch[key][k] = moment(new Date(v));\n                      return;\n                    }\n                    defaultSearch[key][k] = v;\n                    return;\n                  }\n                  defaultSearch[key][k] = v;\n                });\n            }\n            break;\n        }\n      });\n    return defaultSearch;\n  }\n\n  public isMomentObject(o: any) {\n    return (typeof o === 'object' && o !== null && '_isAMomentObject' in o && 'format' in o);\n  }\n\n  public stringifySearch<TSearch extends Search>(search: TSearch) {\n    if (search) {\n      const result: { [key: string]: string | number | boolean | null } = {};\n      Object\n        .entries(search)\n        .forEach(([key, value]) => {\n          if (typeof value === 'object' && value !== null) {\n            Object\n              .entries(value)\n              .forEach(([filterKey, filterValue]) => {\n                if (typeof filterValue === 'object' && filterValue !== null) {\n                  if (this.isMomentObject(filterValue)) {\n                    result[`${key}.${filterKey}`] = moment(filterValue).format(DATE_FORMAT);\n                  } else {\n                    result[`${key}.${filterKey}`] = filterValue as any;\n                  }\n                }\n              });\n            return;\n          }\n          result[key] = value;\n        });\n      return QueryString.stringify(flatten(result));\n    }\n    return '';\n  }\n\n  public useQuery<TSearch extends Search>(defaultTSearch: TSearch, setTSearch: (tSearch: TSearch) => void): [TSearch, (tSearch: TSearch) => void] {\n    const {pathname, search} = useLocation();\n    const history = useHistory();\n\n    const tSearch = React.useMemo(\n      () => {\n        return Search.clone<TSearch>({\n          ...this.parseSearch<TSearch>(search, defaultTSearch),\n        });\n      },\n      [defaultTSearch, search],\n    );\n\n    const setTSearchWithQueryString = React.useCallback(\n      (newTSearch: TSearch) => {\n        setTSearch(newTSearch);\n        history.replace({\n          pathname,\n          search: this.stringifySearch<TSearch>(newTSearch),\n        });\n      },\n      [history, pathname, setTSearch],\n    );\n\n    return [tSearch, setTSearchWithQueryString];\n  }\n}\n\nexport const routerService: RouterService = new RouterService();\n","import nameof from 'ts-nameof.macro';\nimport {Filter} from './Filter';\n\nexport class StringFilter extends Filter {\n\n  public static types(): string[] {\n    const filter: StringFilter = new StringFilter();\n    return [\n      nameof(filter.startWith),\n      nameof(filter.notStartWith),\n      nameof(filter.endWith),\n      nameof(filter.notEndWith),\n      nameof(filter.equal),\n      nameof(filter.notEqual),\n      nameof(filter.contain),\n      nameof(filter.notContain),\n    ];\n  }\n\n  public startWith?: string;\n\n  public notStartWith?: string;\n\n  public endWith?: string;\n\n  public notEndWith?: string;\n\n  public equal?: string;\n\n  public notEqual?: string;\n\n  public contain?: string;\n\n  public notContain?: string;\n}\n","import {StringFilter} from 'core/filters';\nimport {Search} from 'core/models';\n\nexport class ProvinceSearch extends Search {\n  public code?: StringFilter = new StringFilter();\n}\n","export default 'api-consts';\n\nexport const API_ACCOUNT_MASTER_ROUTE: string = '/api/account/account-master';\nexport const API_ACCOUNT_DETAIL_ROUTE: string = '/api/account/account-detail';\nexport const API_DISTRICT_MASTER_ROUTE: string = '/api/district/district-master';\nexport const API_DISTRICT_DETAIL_ROUTE: string = '/api/district/district-detail';\nexport const API_GROUP_MASTER_ROUTE: string = '/api/group/group-master';\nexport const API_GROUP_DETAIL_ROUTE: string = '/api/group/group-detail';\nexport const API_ORDER_CONTENT_MASTER_ROUTE: string = '/api/order-content/order-content-master';\nexport const API_ORDER_CONTENT_DETAIL_ROUTE: string = '/api/order-content/order-content-detail';\nexport const API_ORDER_MASTER_ROUTE: string = '/api/order/order-master';\nexport const API_ORDER_DETAIL_ROUTE: string = '/api/order/order-detail';\nexport const API_PROVINCE_MASTER_ROUTE: string = '/api/province/province-master';\nexport const API_PROVINCE_DETAIL_ROUTE: string = '/api/province/province-detail';\nexport const API_WARD_MASTER_ROUTE: string = '/api/ward/ward-master';\nexport const API_WARD_DETAIL_ROUTE: string = '/api/ward/ward-detail';\n","/* tslint:disable:variable-name */\nimport {AxiosInstance, AxiosRequestConfig, AxiosResponse} from 'axios';\nimport {createHttpService} from 'core/helpers/http';\n\nexport class Repository {\n\n  private static _defaultRequestInterceptor: (v: AxiosRequestConfig) => AxiosRequestConfig | Promise<AxiosRequestConfig>;\n\n  private static _defaultResponseInterceptor: (v: AxiosResponse<any>) => AxiosResponse<any> | Promise<AxiosResponse<any>>;\n\n  protected http: AxiosInstance;\n\n  constructor(\n    config?: AxiosRequestConfig,\n    requestInterceptor?: (config: AxiosRequestConfig) => AxiosRequestConfig,\n    responseInterceptor?: (response: AxiosResponse) => any,\n  ) {\n    this.http = createHttpService(config, requestInterceptor, responseInterceptor);\n    if (typeof Repository._defaultRequestInterceptor === 'function') {\n      this.http.interceptors.request.use(Repository._defaultRequestInterceptor);\n    }\n    if (typeof Repository._defaultResponseInterceptor === 'function') {\n      this.http.interceptors.response.use(Repository._defaultResponseInterceptor);\n    }\n  }\n\n  public setBaseURL(baseURL: string) {\n    this.http.defaults.baseURL = baseURL;\n  }\n\n  public getHttpInstance(): AxiosInstance {\n    return this.http;\n  }\n\n  static set defaultRequestInterceptor(value: (v: AxiosRequestConfig) => (AxiosRequestConfig | Promise<AxiosRequestConfig>)) {\n    this._defaultRequestInterceptor = value;\n  }\n\n  static set defaultResponseInterceptor(value: (v: AxiosResponse<any>) => (AxiosResponse<any> | Promise<AxiosResponse<any>>)) {\n    this._defaultResponseInterceptor = value;\n  }\n}\n","import axios, {AxiosInstance, AxiosRequestConfig, AxiosResponse} from 'axios';\n\nexport function createHttpService(\n  config: AxiosRequestConfig,\n  requestInterceptor?: (config: AxiosRequestConfig) => AxiosRequestConfig,\n  responseInterceptor?: (response: AxiosResponse) => any,\n): AxiosInstance {\n  const instance: AxiosInstance = axios.create(config);\n  if (requestInterceptor) {\n    instance.interceptors.request.use(requestInterceptor);\n  }\n  if (responseInterceptor) {\n    instance.interceptors.response.use(responseInterceptor);\n  }\n  return instance;\n}\n","import {Model} from 'core/models';\nimport {ErrorMap, PureModelData} from 'core/types';\nimport {District} from './District';\n\nexport class Ward extends Model {\n  public static clone<T extends Model = Ward>(ward?: PureModelData<Ward>): T | null {\n    const instance: T = new Model() as T;\n    if (typeof ward !== 'undefined' && ward !== null) {\n      Object.assign(instance,\n        {\n          ...ward,\n\n          district: District?.clone<District>(ward.district),\n        });\n      return instance;\n    }\n    return null;\n  }\n\n  public id?: number;\n\n  public code?: string;\n\n  public name?: string;\n\n  public districtId?: number;\n\n  public district?: District;\n\n  public errors?: ErrorMap<Ward>;\n}\n","import {Model} from 'core/models';\nimport {ErrorMap, PureModelData} from 'core/types';\nimport {Province} from './Province';\nimport {Ward} from './Ward';\n\nexport class District extends Model {\n  public static clone<T extends Model = District>(district?: PureModelData<District>): T | null {\n    const instance: T = new Model() as T;\n    if (typeof district !== 'undefined' && district !== null) {\n      Object.assign(instance,\n        {\n          ...district,\n          province: Province?.clone<Province>(district.province),\n          wards: district.wards?.map((ward: Ward) => Ward.clone<Ward>(ward)),\n        });\n      return instance;\n    }\n    return null;\n  }\n\n  public id?: number;\n\n  public code?: string;\n\n  public name?: string;\n\n  public provinceId?: number;\n\n  public province?: Province;\n\n  public wards?: Ward[];\n\n  public errors?: ErrorMap<District>;\n}\n","import {Model} from 'core/models';\nimport {ErrorMap, PureModelData} from 'core/types';\nimport {District} from './District';\n\nexport class Province extends Model {\n  public static clone<T extends Model = Province>(province?: PureModelData<Province>): T | null {\n    const instance: T = new Model() as T;\n    if (typeof province !== 'undefined' && province !== null) {\n      Object.assign(instance,\n        {\n          ...province,\n\n          districts: province.districts?.map((district: District) => District.clone<District>(district)),\n        });\n      return instance;\n    }\n    return null;\n  }\n\n  public id?: number;\n\n  public code?: string;\n\n  public name?: string;\n\n  public districts?: District[];\n\n  public errors?: ErrorMap<Province>;\n}\n","import {AxiosResponse} from 'axios';\nimport {API_PROVINCE_MASTER_ROUTE} from 'config/api-consts';\nimport {Repository} from 'core/repositories';\nimport {PureModelData} from 'core/types';\nimport kebabCase from 'lodash/kebabCase';\nimport {Province} from 'models/Province';\nimport {ProvinceFilter} from 'models/ProvinceFilter';\nimport nameof from 'ts-nameof.macro';\n\nexport class ProvinceMasterRepository extends Repository {\n  constructor() {\n    super();\n    this.setBaseURL(API_PROVINCE_MASTER_ROUTE);\n  }\n\n  public count = (provinceFilter: ProvinceFilter): Promise<number> => {\n    return this.http.post<number>(kebabCase(nameof(this.count)), provinceFilter)\n      .then((response: AxiosResponse<number>) => {\n        return response.data;\n      });\n  };\n\n  public list = (provinceFilter: ProvinceFilter): Promise<Province[]> => {\n    return this.http.post<Province[]>(kebabCase(nameof(this.list)), provinceFilter)\n      .then((response: AxiosResponse<Array<PureModelData<Province>>>) => {\n        return response.data.map((province: PureModelData<Province>) => {\n          return Province.clone<Province>(province);\n        });\n      });\n  };\n\n  public get = (province: Province): Promise<Province> => {\n    return this.http.post<Province>(kebabCase(nameof(this.get)), province)\n      .then((response: AxiosResponse<PureModelData<Province>>) => {\n        return Province.clone<Province>(response.data);\n      });\n  };\n}\n\nexport const provinceMasterRepository: ProvinceMasterRepository = new ProvinceMasterRepository();\n","import Card from 'antd/lib/card';\nimport Table from 'antd/lib/table';\nimport {PROVINCE_ROUTE} from 'config/route-consts';\nimport {crudService} from 'core/services';\nimport {ProvinceSearch} from 'models/ProvinceSearch';\nimport React from 'react';\nimport nameof from 'ts-nameof.macro';\nimport 'views/DefaultViews/ProvinceView/ProvinceMaster/ProvinceMaster.scss';\nimport {provinceMasterRepository} from 'views/DefaultViews/ProvinceView/ProvinceMaster/ProvinceMasterRepository';\n\nfunction ProvinceMaster() {\n  const [provinces] = crudService.useMaster(\n    PROVINCE_ROUTE,\n    provinceMasterRepository.list,\n    provinceMasterRepository.count,\n    ProvinceSearch,\n  );\n\n  return (\n    <Card>\n      <Table dataSource={provinces} rowKey={nameof(provinces[0].id)}>\n      </Table>\n    </Card>\n  );\n}\n\nexport default ProvinceMaster;\n","import React from 'react';\nimport {Switch, withRouter} from 'react-router';\nimport {renderRoutes, RouteConfigComponentProps} from 'react-router-config';\nimport 'views/DefaultViews/ProvinceView/ProvinceView.scss';\n\nfunction ProvinceView(props: RouteConfigComponentProps) {\n  const {route} = props;\n\n  return (\n    <Switch>\n      {route?.routes && renderRoutes(route.routes)}\n    </Switch>\n  );\n}\n\nexport default withRouter(ProvinceView);\n","import {PROVINCE_ROUTE, ROOT_ROUTE} from 'config/route-consts';\nimport {defaultActions} from 'core/config';\nimport DefaultLayout from 'layouts/DefaultLayout/DefaultLayout';\nimport path from 'path';\nimport {RouteConfig} from 'react-router-config';\nimport ProvinceDetail from 'views/DefaultViews/ProvinceView/ProvinceDetail/ProvinceDetail';\nimport ProvinceMaster from 'views/DefaultViews/ProvinceView/ProvinceMaster/ProvinceMaster';\nimport ProvinceView from 'views/DefaultViews/ProvinceView/ProvinceView';\n\nexport const routes: RouteConfig[] = [\n  {\n    path: ROOT_ROUTE,\n    component: DefaultLayout,\n    routes: [\n      {\n        path: PROVINCE_ROUTE,\n        component: ProvinceView,\n        routes: [\n          {\n            path: path.join(PROVINCE_ROUTE, defaultActions.add),\n            component: ProvinceDetail,\n          },\n          {\n            path: path.join(PROVINCE_ROUTE, ':id'),\n            component: ProvinceDetail,\n          },\n          {\n            path: PROVINCE_ROUTE,\n            component: ProvinceMaster,\n          },\n        ],\n      },\n    ],\n  },\n];\n","import {GlobalState} from 'core/config';\nimport {renderRoutes, RouteConfig} from 'react-router-config';\nimport {Switch} from 'react-router-dom';\nimport React from 'reactn';\n\nexport interface AppProps {\n  routes?: RouteConfig[];\n}\n\nfunction App(props: AppProps) {\n  const {routes} = props;\n\n  const [title] = React.useGlobal<GlobalState, 'title'>('title');\n\n  React.useEffect(\n    () => {\n      document.title = title;\n    },\n    [title],\n  );\n\n  return (\n    <Switch>\n      {renderRoutes(routes)}\n    </Switch>\n  );\n}\n\nexport default App;\n","import Spin from 'antd/lib/spin';\nimport {GlobalState} from 'core/config/global';\nimport {ReactNode} from 'react';\nimport React, {useGlobal} from 'reactn';\n\nexport interface AppLoadingProps {\n  children?: ReactNode | ReactNode[];\n}\n\nfunction AppLoading(props: AppLoadingProps) {\n  const [loading, setLoading] = useGlobal<GlobalState>('loading');\n  const {children} = props;\n\n  React.useEffect(\n    () => {\n      setLoading(false);\n    },\n    [setLoading],\n  );\n\n  return (\n    <Spin spinning={loading as boolean}>\n      {children}\n    </Spin>\n  );\n}\n\nexport default AppLoading;\n","/* tslint:disable:no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import {ROOT_ID} from 'config/consts';\nimport initialI18NextConfig from 'config/i18next';\nimport {routes} from 'config/routes';\nimport App from 'core/components/App/App';\nimport AppLoading from 'core/components/AppLoading/AppLoading';\nimport initialGlobalState, {GlobalState} from 'core/config/global';\nimport {changeLanguage} from 'core/helpers';\nimport i18next from 'i18next';\nimport ReactDOM from 'react-dom';\nimport {initReactI18next} from 'react-i18next';\nimport {BrowserRouter} from 'react-router-dom';\nimport React, {setGlobal} from 'reactn';\nimport * as serviceWorker from 'service-worker';\nimport 'styles';\n\nPromise.all([\n  i18next.use(initReactI18next)\n    .init(initialI18NextConfig)\n    .then(() => {\n      return changeLanguage('vi');\n    }),\n  setGlobal<GlobalState>(initialGlobalState),\n])\n  .then(() => {\n    const root: HTMLDivElement = document.getElementById(ROOT_ID) as HTMLDivElement;\n    (root.hasChildNodes() ? ReactDOM.hydrate : ReactDOM.render)(\n      <BrowserRouter>\n        <AppLoading>\n          <App routes={routes}/>\n        </AppLoading>\n      </BrowserRouter>,\n      root,\n    );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n    serviceWorker.unregister();\n  });\n","import axios, {AxiosResponse} from 'axios';\nimport {GlobalState, LanguageType} from 'core/config';\nimport i18next from 'i18next';\nimport {join} from 'path';\nimport {setGlobal} from 'reactn';\n\n/**\n * Translate marker\n *\n * @param {string} input\n * @returns {string}\n */\nexport function translate(input: string) {\n  return input;\n}\n\nexport async function changeLanguage(language: LanguageType) {\n  await setGlobal<GlobalState>({\n    loading: true,\n  });\n  await axios.get(join('/i18n', `${language}.json`))\n    .then(async (response: AxiosResponse<any>) => {\n      await i18next.addResource(language, '', '', response.data);\n      await i18next.changeLanguage(language);\n      await setGlobal<GlobalState>({\n        language,\n      });\n    });\n}\n","import {ColumnWidth} from 'react3l';\n\nexport * from 'core/config';\n\nexport const ROOT_ID: string = 'root';\n\nexport const defaultColumnWidth: ColumnWidth = {\n  index: 50,\n  checkbox: 50,\n  expand: 50,\n  actions: 100,\n};\n"],"sourceRoot":""}