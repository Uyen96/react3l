{"version":3,"sources":["core/helpers/translate.ts","core/config/consts.ts","core/config/global.ts","core/config/config-tests.ts","config/consts.ts","config/i18next.ts","config/route-consts.ts","core/helpers/debounce.ts","config/menu.ts","layouts/CoreUILayout/CoreUILayout.tsx","helpers/coreui/breadcrumbs.ts","views/DefaultViews/ProvinceView/ProvinceDetail/ProvinceDetail.tsx","core/models/Cloneable.ts","core/models/Model.ts","core/models/Search.ts","components/ant-design/Select/Select.tsx","core/filters/Filter.ts","core/filters/GuidFilter.ts","core/filters/IdFilter.ts","core/filters/StringFilter.ts","core/filters/NumberFilter.ts","core/filters/DateFilter.ts","components/ant-design/AdvancedStringFilter/AdvancedStringFilter.tsx","components/MasterPreview/MasterPreview.tsx","config/ant-design.ts","core/services/CRUDService.ts","core/services/RouterService.ts","helpers/ant-design/table.ts","models/ProvinceFilter.ts","services/ant-design/TableService.ts","config/api-consts.ts","core/repositories/Repository.ts","core/helpers/http.ts","models/Ward.ts","models/District.ts","models/Province.ts","views/DefaultViews/ProvinceView/ProvinceMaster/ProvinceMasterRepository.ts","core/helpers/url.ts","views/DefaultViews/ProvinceView/ProvinceMaster/ProvinceMaster.tsx","views/DefaultViews/ProvinceView/ProvinceView.tsx","config/routes.tsx","core/components/App/App.tsx","service-worker.ts","index.tsx"],"names":["translate","input","BASE_URL","process","APP_TITLE","DEFAULT_TAKE","INPUT_DEBOUNCE_TIME","parseInt","DATE_FORMAT","TIME_FORMAT","initialGlobalState","language","fallbackLanguage","loading","title","i18n","defaultColumnWidth","index","checkbox","expand","actions","i18nextConfig","resources","lng","fallbackLng","ns","defaultNS","nsSeparator","keySeparator","interpolation","escapeValue","nestingSuffixEscaped","prefix","suffix","PROVINCE_ROUTE","debounce","tFunction","debounceTime","lodashDebounce","menu","items","name","url","icon","navbarBrandFull","src","width","height","navbarBrandMinimized","withRouter","props","route","useTranslation","translatedMenu","React","useMemo","map","translatedRoutes","translateBreadcrumbs","routes","translateMarker","forEach","Array","path","exact","className","full","minimized","display","navConfig","router","ReactRouterDOM","appRoutes","renderRoutes","ProvinceDetail","Cloneable","model","instance","Object","assign","Model","errors","key","Search","skip","take","orderBy","orderType","Option","AntSelect","Select","forwardRef","ref","search","setSearch","defaultList","list","children","getList","onSearchError","allowClear","onChange","searchField","value","defaultValue","render","useState","setList","setLoading","useEffect","handleLoadList","useCallback","a","async","handleSearch","clone","handleToggle","visible","handleChange","option","undefined","classNames","onDropdownVisibleChange","mode","showSearch","onSearch","t","id","data-content","defaultProps","Filter","filter","this","GuidFilter","equal","notEqual","in","notIn","IdFilter","StringFilter","startWith","notStartWith","endWith","notEndWith","contain","notContain","NumberFilter","greater","greaterEqual","less","lessEqual","range","DateFilter","AdvancedStringFilter","defaultType","inputType","type","types","FilterClass","setType","createRef","handleSubmitChange","current","handleCheckClear","handleChangeType","addonBefore","setState","onPressEnter","MasterPreview","onClose","restProps","unmountOnClose","onClick","formItemLayout","labelCol","xs","span","sm","wrapperCol","crudService","setModel","handleSetInputValue","field","handleDebounceInputValue","handleChangeSimpleField","event","target","handleUpdateDateField","moment","v4","setValue","v","handleDelete","newValue","handleAdd","newContent","reference","baseRoute","getDetail","saveDetail","onSavingError","setT","useParams","isDetail","history","useHistory","handleGoBack","push","join","handleSave","newT","then","finally","onError","enums","setEnums","catch","masterList","masterCount","tSearch","total","setTotal","previewVisible","setPreviewVisible","previewModel","setPreviewModel","handlePreview","handleClosePreview","handleEdit","toString","handleReset","newSearch","entries","filterKey","handleFilter","Promise","all","getOrderType","getOrderTypeForTable","sorter","order","renderMasterIndex","pagination","pageSize","ProvinceFilter","code","antTableService","onDelete","onSetLoading","onSuccess","onCancel","Modal","confirm","content","okType","onOk","message","info","error","response","data","filterHandler","defaultFilterHandler","columnKey","column","dataSource","length","handleTableChange","newPagination","filters","newSorter","toUpperCase","startsWith","setOrderType","TableService","hasType","filterValue","endsWith","indexOf","result","toDate","getTime","minValue","maxValue","minTimeValue","maxTimeValue","comparisonValue","includes","keys","API_PROVINCE_MASTER_ROUTE","Repository","config","requestInterceptor","responseInterceptor","http","axios","create","interceptors","request","use","createHttpService","_defaultRequestInterceptor","_defaultResponseInterceptor","baseURL","defaults","Ward","districtId","district","ward","District","provinceId","province","wards","Province","districts","provinceMasterRepository","count","provinceFilter","post","kebabCase","get","setBaseURL","FormItem","Form","Item","ProvinceMaster","useMaster","provinces","useMasterTable","columns","sortOrder","dataIndex","align","label","bordered","size","tableLayout","rowKey","isOpen","component","CoreUILayout","ProvinceView","App","useGlobal","document","Boolean","window","location","hostname","match","i18next","initReactI18next","init","initialI18NextConfig","setGlobal","addResource","changeLanguage","root","getElementById","hasChildNodes","ReactDOM","hydrate","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7bd9be48.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios';\nimport {GlobalState, LanguageType} from 'core/config';\nimport i18next from 'i18next';\nimport {join} from 'path';\nimport {setGlobal} from 'reactn';\n\n/**\n * Translate marker\n *\n * @param {string} input\n * @returns {string}\n */\nexport function translate(input: string) {\n  return input;\n}\n\nexport async function changeLanguage(language: LanguageType) {\n  await setGlobal<GlobalState>({\n    loading: true,\n  });\n  await axios.get(join('/i18n', `${language}.json`))\n    .then(async (response: AxiosResponse<any>) => {\n      await i18next.addResource(language, '', '', response.data);\n      await i18next.changeLanguage(language);\n      await setGlobal<GlobalState>({\n        language,\n      });\n    });\n}\n","import {translate} from 'core/helpers/translate';\nimport {TableKeys} from 'react3l';\n\nexport const defaultKeys: TableKeys = {\n  index: translate('general.keys.index'),\n  actions: translate('general.keys.actions'),\n  checkbox: translate('general.keys.checkbox'),\n  expand: translate('general.keys.expand'),\n};\n\nexport const defaultActions = {\n  add: translate('general.actions.add'),\n};\n\nexport const __DEV__: boolean = process.env.NODE_ENV === 'development';\n\nexport const BASE_URL: string = __DEV__ ? window.location.origin : process.env.REACT_APP_BASE_URL;\n\nexport const APP_TITLE: string = process.env.REACT_APP_TITLE ?? '';\n\nexport const DEFAULT_TAKE: number = 10;\n\nexport const INPUT_DEBOUNCE_TIME: number = parseInt(process.env.INPUT_DEBOUNCE_TIME, 10) ?? 400;\n\nexport const DATE_FORMAT: string = 'YYYY-MM-DD';\n\nexport const TIME_FORMAT: string = 'HH:mm:ss';\n\nexport const DATE_TIME_FORMAT: string = `${DATE_FORMAT} ${TIME_FORMAT}`;\n","import {APP_TITLE} from 'core/config/consts';\n\nexport type LanguageType = 'en' | 'vi';\n\nexport interface GlobalState {\n  language?: LanguageType;\n\n  fallbackLanguage?: LanguageType;\n\n  loading?: boolean;\n\n  title?: string;\n}\n\nconst initialGlobalState: GlobalState = {\n  language: 'vi',\n  fallbackLanguage: 'vi',\n  loading: true,\n  title: APP_TITLE,\n};\n\nexport default initialGlobalState;\n","import initialGlobalState, {GlobalState} from 'core/config/global';\nimport i18n from 'i18next';\nimport {initReactI18next} from 'react-i18next';\nimport React from 'reactn';\n\nexport async function configTests() {\n  await Promise.all([\n    React.setGlobal<GlobalState>(initialGlobalState),\n    i18n\n      .use(initReactI18next)\n      .init({\n        fallbackLng: 'en',\n        // have a common namespace used around the full app\n        ns: ['translations'],\n        defaultNS: 'translations',\n        debug: false,\n        interpolation: {\n          escapeValue: false, // not needed for react!!\n        },\n      }),\n  ]);\n}\n\nexport default i18n;\n","import {ColumnWidth} from 'react3l';\n\nexport * from 'core/config';\n\nexport const ROOT_ID: string = 'root';\n\nexport const defaultColumnWidth: ColumnWidth = {\n  index: 50,\n  checkbox: 50,\n  expand: 50,\n  actions: 120,\n};\n","import initialGlobalState from 'core/config/global';\nimport {InitOptions} from 'i18next';\n\nconst i18nextConfig: InitOptions = {\n  resources: {},\n  lng: initialGlobalState.language,\n  fallbackLng: initialGlobalState.fallbackLanguage,\n  ns: '',\n  defaultNS: '',\n  nsSeparator: false,\n  keySeparator: '.',\n  interpolation: {\n    escapeValue: false,\n    nestingSuffixEscaped: '.',\n    prefix: '{{',\n    suffix: '}}',\n  },\n};\n\nexport default i18nextConfig;\n","export default 'route-consts';\n\nexport const ROOT_ROUTE: string = '/';\n\nexport const ACCOUNT_ROUTE: string = '/accounts';\nexport const DISTRICT_ROUTE: string = '/districts';\nexport const GROUP_ROUTE: string = '/groups';\nexport const ORDER_CONTENT_ROUTE: string = '/orderContents';\nexport const ORDER_ROUTE: string = '/orders';\nexport const PROVINCE_ROUTE: string = '/provinces';\nexport const WARD_ROUTE: string = '/wards';\n","import {INPUT_DEBOUNCE_TIME} from 'core/config/consts';\nimport lodashDebounce from 'lodash/debounce';\n\nexport function debounce(tFunction: (...params: any[]) => any, debounceTime: number = INPUT_DEBOUNCE_TIME) {\n  return lodashDebounce(tFunction, debounceTime);\n}\n","import {PROVINCE_ROUTE} from 'config/route-consts';\nimport {translate} from 'core/helpers';\nimport {RouteConfig} from 'react-router-config';\n\nexport const menu: { items: RouteConfig[] } = {\n  items: [\n    {\n      name: translate('menu.provinces.name'),\n      url: PROVINCE_ROUTE,\n      icon: 'fa fa-building',\n    },\n  ],\n};\n","import Breadcrumb from '@coreui/react/lib/Breadcrumb';\nimport NavbarBrand from '@coreui/react/lib/NavbarBrand';\nimport Sidebar from '@coreui/react/lib/Sidebar';\nimport SidebarMinimizer from '@coreui/react/lib/SidebarMinimizer';\nimport SidebarNav from '@coreui/react/lib/SidebarNav';\nimport SidebarToggler from '@coreui/react/lib/SidebarToggler';\nimport {menu} from 'config/menu';\nimport {translateBreadcrumbs} from 'helpers/coreui/breadcrumbs';\nimport React from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {Switch, withRouter} from 'react-router';\nimport {renderRoutes, RouteConfig, RouteConfigComponentProps} from 'react-router-config';\nimport * as ReactRouterDOM from 'react-router-dom';\nimport './CoreUILayout.scss';\n\ninterface NavbarBrandLogoProps {\n  src: string;\n\n  width?: number;\n\n  height?: number;\n\n  alt?: string;\n}\n\nconst navbarBrandFull: NavbarBrandLogoProps = {\n  src: '/assets/img/brand/logo.svg',\n  width: 89,\n  height: 25,\n};\n\nconst navbarBrandMinimized: NavbarBrandLogoProps = {\n  src: '/assets/img/brand/sygnet.svg',\n  width: 30,\n  height: 30,\n};\n\nfunction CoreUILayout(props: RouteConfigComponentProps) {\n  const {route} = props;\n  const [translate] = useTranslation();\n\n  const translatedMenu = React.useMemo(\n    () => ({\n      items: menu.items.map((route: RouteConfig) => ({\n        ...route,\n        name: translate(route.name),\n      })),\n    }),\n    [translate],\n  );\n\n  const translatedRoutes: RouteConfig[] = React.useMemo(\n    () => {\n      return translateBreadcrumbs(route?.routes, translate);\n    },\n    [route, translate],\n  );\n\n  return (\n    <>\n      <header className=\"app-header navbar\">\n        <NavbarBrand\n          full={navbarBrandFull}\n          minimized={navbarBrandMinimized}\n        />\n        <SidebarToggler className=\"d-md-down-none\" display=\"lg\"/>\n      </header>\n      <div className=\"app-body\">\n        <Sidebar display=\"lg\">\n          <SidebarNav navConfig={translatedMenu} router={ReactRouterDOM}/>\n          <SidebarMinimizer/>\n        </Sidebar>\n        <main className=\"main\">\n          <Breadcrumb appRoutes={translatedRoutes} router={ReactRouterDOM}/>\n          <div className=\"container-fluid\">\n            <Switch>\n              {route?.routes instanceof Array && renderRoutes(route.routes)}\n            </Switch>\n          </div>\n        </main>\n      </div>\n    </>\n  );\n}\n\nexport default withRouter(CoreUILayout);\n","import {translate as translateMarker} from 'core/helpers';\nimport {RouteConfig} from 'react-router-config';\n\nexport function translateBreadcrumbs(routes: RouteConfig[], translate: (str: string) => string = translateMarker) {\n  let translatedRoutes: RouteConfig[] = [];\n  routes?.forEach((route: RouteConfig) => {\n    if (route?.routes instanceof Array) {\n      translatedRoutes = [\n        ...translatedRoutes,\n        ...translateBreadcrumbs(route.routes, translate),\n      ];\n    }\n    translatedRoutes = [\n      ...translatedRoutes,\n      {\n        path: route.path,\n        name: translate(route.name),\n        exact: route.exact,\n      },\n    ];\n  });\n  return translatedRoutes;\n}\n","import React from 'react';\nimport 'views/DefaultViews/ProvinceView/ProvinceDetail/ProvinceDetail.scss';\n\nfunction ProvinceDetail() {\n  return (\n    <>\n    </>\n  );\n}\n\nexport default ProvinceDetail;\n","import {PureModelData} from 'core/types';\n\nexport class Cloneable {\n  public static clone<T extends Cloneable>(model?: PureModelData<T>): T {\n    const instance: T = new Cloneable() as T;\n    if (typeof model !== 'undefined' && model !== null) {\n      Object.assign(instance, model);\n    }\n    return instance;\n  }\n}\n","import {ErrorMap} from '../types';\nimport {Cloneable} from './Cloneable';\n\nexport class Model extends Cloneable {\n  public errors?: ErrorMap<Model>;\n\n  public key?: string | number;\n\n  [key: string]: any;\n\n  constructor(model?: Model) {\n    super();\n    if (model !== null && typeof model === 'object') {\n      Object.assign(this, model);\n    }\n  }\n}\n","import {DEFAULT_TAKE} from '../config';\nimport {Cloneable} from './Cloneable';\n\nexport class Search extends Cloneable {\n  public skip?: number = 0;\n\n  public take?: number = DEFAULT_TAKE;\n\n  public orderBy?: string;\n\n  public orderType?: string;\n}\n","import AntSelect, {OptionProps} from 'antd/lib/select';\nimport {AxiosError} from 'axios';\nimport classNames from 'classnames';\nimport 'components/ant-design/Select/Select.scss';\nimport {debounce} from 'core/helpers';\nimport {Model, Search} from 'core/models';\nimport React, {ReactElement, Ref} from 'react';\n\nconst {Option} = AntSelect;\n\nexport interface SelectOptionProps<T extends Model> extends OptionProps {\n  'data-content': T;\n\n  [key: string]: any;\n}\n\nfunction defaultRenderObject<T extends Model>(t: T) {\n  return t.name;\n}\n\nexport type DefaultSelectChange<T extends Model> = (value: string | number, subject?: T) => void;\n\nexport interface SelectProps<T extends Model, TSearch extends Search> {\n  value?: number | string;\n\n  defaultValue?: number | string;\n\n  children?: ReactElement<SelectOptionProps<T>> | Array<ReactElement<SelectOptionProps<T>>>;\n\n  list?: T[];\n\n  getList?: (tSearch?: TSearch) => Promise<T[]>;\n\n  search?: TSearch;\n\n  setSearch?: (search?: TSearch) => void;\n\n  searchField?: string;\n\n  allowClear?: boolean;\n\n  disabled?: boolean;\n\n  className?: string;\n\n  onChange?: DefaultSelectChange<T>;\n\n  onSearchError?: (error: AxiosError<T>) => void;\n\n  render?: (t: T) => string;\n}\n\nconst Select = React.forwardRef(\n  <T extends Model, TSearch extends Search>(props: SelectProps<T, TSearch>, ref: Ref<any>) => {\n    const {\n      search,\n      setSearch,\n      className,\n      list: defaultList,\n      children,\n      getList,\n      onSearchError,\n      allowClear,\n      onChange,\n      searchField,\n      value,\n      defaultValue,\n      render,\n    } = props;\n\n    const [list, setList] = React.useState<T[]>(defaultList ?? []);\n    const [loading, setLoading] = React.useState<boolean>(false);\n\n    React.useEffect(\n      () => {\n        if (defaultList) {\n          setList(defaultList);\n        }\n      },\n      [defaultList],\n    );\n\n    const handleLoadList = React.useCallback(\n      async () => {\n        try {\n          setLoading(true);\n          setList(await getList(search));\n        } catch (error) {\n          if (typeof onSearchError === 'function') {\n            onSearchError(error);\n          }\n        }\n        setLoading(false);\n      },\n      [getList, onSearchError, search],\n    );\n\n    const handleSearch = React.useMemo(\n      () => debounce((value: string) => {\n        setSearch(Search.clone<TSearch>({\n          ...search,\n          [searchField]: value,\n        }));\n      }),\n      [search, searchField, setSearch],\n    );\n\n    const handleToggle = React.useCallback(\n      async (visible: boolean) => {\n        if (visible && typeof getList === 'function') {\n          await handleLoadList();\n        }\n      },\n      [getList, handleLoadList],\n    );\n\n    const handleChange = React.useCallback(\n      (\n        value: number | string,\n        option?: ReactElement<SelectOptionProps<T>>,\n      ) => {\n        if (onChange) {\n          if (value && option) {\n            return onChange(value, option.props['data-content']);\n          }\n          return onChange(undefined, undefined);\n        }\n      },\n      [onChange],\n    );\n\n    return (\n      <AntSelect\n        ref={ref}\n        className={classNames('w-100', className)}\n        onDropdownVisibleChange={handleToggle}\n        mode=\"default\"\n        onChange={handleChange}\n        loading={loading}\n        allowClear={allowClear}\n        showSearch={typeof getList === 'function'}\n        onSearch={handleSearch}\n        defaultValue={defaultValue}\n        value={value}\n      >\n        {list.map((t: T) => (\n          <Option key={t.id} data-content={t} value={t.id}>\n            {render(t)}\n          </Option>\n        ))}\n        {children}\n      </AntSelect>\n    );\n  },\n);\n\nSelect.defaultProps = {\n  render: defaultRenderObject,\n};\n\nexport default Select;\n","export class Filter {\n\n  constructor(filter?: Filter) {\n    if (!!filter) {\n      Object.assign(this, filter);\n    }\n  }\n}\n","import nameof from 'ts-nameof.macro';\nimport {Filter} from './Filter';\n\nexport class GuidFilter extends Filter {\n\n  public static types(): string[] {\n    const filter: GuidFilter = new GuidFilter();\n    return [\n      nameof(filter.equal),\n      nameof(filter.notEqual),\n      nameof(filter.in),\n      nameof(filter.notIn),\n    ];\n  }\n\n  public equal?: string;\n\n  public notEqual?: string;\n\n  public in?: string[];\n\n  public notIn?: string[];\n}\n","import nameof from 'ts-nameof.macro';\nimport {Filter} from './Filter';\n\nexport class IdFilter extends Filter {\n\n  public static types(): string[] {\n    const filter: IdFilter = new IdFilter();\n    return [\n      nameof(filter.equal),\n      nameof(filter.notEqual),\n      nameof(filter.in),\n      nameof(filter.notIn),\n    ];\n  }\n\n  public equal?: number;\n\n  public notEqual?: number;\n\n  public in?: number[];\n\n  public notIn?: number[];\n}\n","import nameof from 'ts-nameof.macro';\nimport {Filter} from './Filter';\n\nexport class StringFilter extends Filter {\n\n  public static types(): string[] {\n    const filter: StringFilter = new StringFilter();\n    return [\n      nameof(filter.startWith),\n      nameof(filter.notStartWith),\n      nameof(filter.endWith),\n      nameof(filter.notEndWith),\n      nameof(filter.equal),\n      nameof(filter.notEqual),\n      nameof(filter.contain),\n      nameof(filter.notContain),\n    ];\n  }\n\n  public startWith?: string;\n\n  public notStartWith?: string;\n\n  public endWith?: string;\n\n  public notEndWith?: string;\n\n  public equal?: string;\n\n  public notEqual?: string;\n\n  public contain?: string;\n\n  public notContain?: string;\n}\n","import nameof from 'ts-nameof.macro';\nimport {Filter} from '../filters/Filter';\n\nexport class NumberFilter extends Filter {\n\n  public static types(): string[] {\n    const filter: NumberFilter = new NumberFilter();\n    return [\n      nameof(filter.equal),\n      nameof(filter.notEqual),\n      nameof(filter.greater),\n      nameof(filter.greaterEqual),\n      nameof(filter.less),\n      nameof(filter.lessEqual),\n      nameof(filter.range),\n    ];\n  }\n\n  public equal?: number;\n\n  public notEqual?: number;\n\n  public greater?: number;\n\n  public greaterEqual?: number;\n\n  public less?: number;\n\n  public lessEqual?: number;\n\n  public range?: [number | undefined, number | undefined];\n}\n","import {Filter} from 'core/filters/Filter';\nimport {Moment} from 'moment';\nimport nameof from 'ts-nameof.macro';\n\nexport class DateFilter extends Filter {\n\n  public static types(): string[] {\n    const filter: DateFilter = new DateFilter();\n    return [\n      nameof(filter.equal),\n      nameof(filter.notEqual),\n      nameof(filter.greater),\n      nameof(filter.greaterEqual),\n      nameof(filter.less),\n      nameof(filter.lessEqual),\n      nameof(filter.range),\n    ];\n  }\n\n  public equal?: Moment;\n\n  public notEqual?: Moment;\n\n  public greater?: Moment;\n\n  public greaterEqual?: Moment;\n\n  public less?: Moment;\n\n  public lessEqual?: Moment;\n\n  public range?: [Moment | null | undefined, Moment | null | undefined];\n}\n","import Input from 'antd/lib/input';\nimport 'components/ant-design/AdvancedStringFilter/AdvancedStringFilter.scss';\nimport Select from 'components/ant-design/Select/Select';\nimport {DateFilter, GuidFilter, IdFilter, NumberFilter, StringFilter} from 'core/filters';\nimport {FilterType} from 'core/types';\nimport React from 'react';\n\nexport interface AdvancedStringFilterProps {\n  filter: StringFilter | NumberFilter | IdFilter | GuidFilter;\n\n  defaultType?: string;\n\n  type?: 'text' | 'number';\n\n  className?: string;\n\n  onChange?(filter: StringFilter | NumberFilter | IdFilter | GuidFilter);\n}\n\nfunction AdvancedStringFilter(props: AdvancedStringFilterProps) {\n  const {filter, defaultType, onChange, type: inputType, className} = props;\n\n  const types: FilterType[] = React.useMemo(\n    () => {\n      const filterClasses = [\n        StringFilter,\n        NumberFilter,\n        IdFilter,\n        GuidFilter,\n        DateFilter,\n      ];\n      for (const FilterClass of filterClasses) {\n        if (filter instanceof FilterClass) {\n          return FilterClass\n            .types()\n            .map((type: string, index: number) => {\n              return {\n                id: index,\n                name: type,\n              };\n            }) as FilterType[];\n        }\n      }\n      return [];\n    },\n    [filter],\n  );\n\n  const [type, setType] = React.useState<string>(defaultType ?? types[0].name);\n\n  const ref = React.createRef<Input>();\n\n  const handleSubmitChange = React.useCallback(\n    () => {\n      const {value} = ref.current.input;\n      if (value !== '') {\n        filter[type] = value;\n      } else {\n        filter[type] = null;\n      }\n      if (typeof onChange === 'function') {\n        onChange(filter);\n      }\n    },\n    [filter, onChange, ref, type],\n  );\n\n  const handleCheckClear = React.useCallback(\n    () => {\n      const {value} = ref.current.input;\n      if (value === '') {\n        handleSubmitChange();\n      }\n    },\n    [handleSubmitChange, ref],\n  );\n\n  const handleChangeType = React.useCallback(\n    (id: number) => {\n      setType(types[id].name);\n    },\n    [types],\n  );\n\n  const addonBefore = React.useMemo(\n    () => {\n      if (typeof defaultType === 'undefined') {\n        return (\n          <Select list={types}\n                  onChange={handleChangeType}\n          />\n        );\n      }\n      return null;\n    },\n    [defaultType, handleChangeType, types],\n  );\n\n  const defaultValue = React.useMemo(\n    () => {\n      if (filter) {\n        return filter[type];\n      }\n      return '';\n    },\n    [filter, type],\n  );\n\n  React.useEffect(\n    () => {\n      if (typeof defaultType === 'string' && defaultType === '') {\n        ref.current.setState({\n          value: '',\n        });\n      }\n    },\n    [defaultType, ref],\n  );\n\n  return (\n    <Input\n      ref={ref}\n      type={inputType}\n      defaultValue={defaultValue}\n      onChange={handleCheckClear}\n      onPressEnter={handleSubmitChange}\n      addonBefore={addonBefore}\n      className={className}\n    />\n  );\n}\n\nAdvancedStringFilter.defaultProps = {\n  type: 'text',\n};\n\nexport default AdvancedStringFilter;\n","import classNames from 'classnames';\nimport {translate} from 'core/helpers';\nimport React from 'react';\nimport {useTranslation} from 'react-i18next';\nimport Modal, {ModalProps} from 'reactstrap/lib/Modal';\nimport ModalBody from 'reactstrap/lib/ModalBody';\nimport ModalFooter from 'reactstrap/lib/ModalFooter';\nimport ModalHeader from 'reactstrap/lib/ModalHeader';\nimport './MasterPreview.scss';\n\nexport interface MasterPreviewProps extends ModalProps {\n  children?: any;\n\n  className?: string;\n\n  title?: string;\n\n  onClose?(): void;\n}\n\nfunction MasterPreview(props: MasterPreviewProps) {\n  const [translate] = useTranslation();\n  const {\n    title,\n    children,\n    className,\n    onClose,\n    ...restProps\n  } = props;\n\n  return (\n    <Modal {...restProps}\n           className={classNames('master-preview', className)}\n           unmountOnClose={true}\n    >\n      <ModalHeader title={translate(title)}>\n        {title}\n      </ModalHeader>\n      <ModalBody>\n        {children}\n      </ModalBody>\n      <ModalFooter>\n        <button className=\"btn btn-primary\" onClick={onClose}>\n          {translate('general.actions.close')}\n        </button>\n      </ModalFooter>\n    </Modal>\n  );\n}\n\nMasterPreview.defaultProps = {\n  title: translate('general.master.defaultPreviewTitle'),\n};\n\nexport default MasterPreview;\n","import {FormProps} from 'antd/lib/form';\nimport {AntSortType} from 'react3l';\n\nexport const formItemLayout: FormProps = {\n  labelCol: {\n    xs: {span: 24},\n    sm: {span: 8},\n  },\n  wrapperCol: {\n    xs: {span: 24},\n    sm: {span: 16},\n  },\n};\n\nexport const antSortType: AntSortType = {\n  ASC: 'ascend',\n  DESC: 'descend',\n};\n","import {Moment} from 'moment';\nimport {join} from 'path';\nimport React from 'react';\nimport {useHistory, useParams} from 'react-router-dom';\nimport {DetailParams} from 'react3l';\nimport nameof from 'ts-nameof.macro';\nimport v4 from 'uuid/v4';\nimport {DEFAULT_TAKE, defaultActions, defaultKeys} from '../config';\nimport {Filter, IdFilter} from '../filters';\nimport {debounce} from '../helpers';\nimport {Model, Search} from '../models';\n\nexport class CRUDService {\n  public useChangeHandlers<T extends Model>(model?: T, setModel?: (t: T) => void): [\n    (field: string) => (value) => void,\n    (field: string) => (value) => void,\n    (field: string) => (value) => void,\n  ] {\n    const handleSetInputValue = React.useCallback(\n      (field: string, value: string | number | boolean | null | undefined) => {\n        setModel(Model.clone<T>({\n          ...model,\n          [field]: value,\n        }));\n      },\n      [model, setModel],\n    );\n\n    const handleDebounceInputValue = React.useCallback(\n      debounce(handleSetInputValue),\n      [handleSetInputValue],\n    );\n\n    const handleChangeSimpleField = React.useCallback(\n      (field: string, debounce: boolean = false) => {\n        return (event: React.ChangeEvent<HTMLInputElement> | number | string | boolean) => {\n          if (typeof event === 'object') {\n            if ('target' in event) {\n              if (debounce) {\n                return handleDebounceInputValue(field, event.target.value);\n              }\n              return handleSetInputValue(field, event.target.value);\n            }\n            if ('format' in event) {\n              setModel(Model.clone<T>({\n                ...model,\n                [field]: event,\n              }));\n            }\n          }\n          if (debounce) {\n            return handleDebounceInputValue(field, event);\n          }\n          return handleSetInputValue(field, event);\n        };\n      },\n      [handleDebounceInputValue, handleSetInputValue, model, setModel],\n    );\n\n    const handleUpdateDateField = React.useCallback(\n      (field: string) => {\n        return (moment: Moment) => {\n          setModel(Model.clone<T>({\n            ...model,\n            [field]: moment,\n          }));\n        };\n      },\n      [model, setModel],\n    );\n\n    const handleChangeObjectField = React.useCallback(\n      (field: string) => {\n        return (id?: number | string | null, t?: T) => {\n          setModel(Model.clone<T>({\n            ...model,\n            [field]: t,\n            [`${field}Id`]: id,\n          }));\n        };\n      },\n      [model, setModel],\n    );\n\n    return [\n      handleChangeSimpleField,\n      handleChangeObjectField,\n      handleUpdateDateField,\n    ];\n  }\n\n  public useContentTable<T extends Model, TContent extends Model>(\n    model: T,\n    setModel: (t: T) => void,\n    field: string,\n  ): [\n    TContent[],\n    (v: TContent[]) => void,\n    () => void,\n    (id: number) => () => void,\n  ] {\n    const value: TContent[] = React.useMemo(\n      () => {\n        if (model[field]) {\n          model[field]?.forEach((t: T) => {\n            if (!t?.key) {\n              if (t?.id) {\n                t.key = t.id;\n              } else {\n                t.key = v4();\n              }\n            }\n          });\n          return model[field];\n        }\n        return [];\n      },\n      [field, model],\n    );\n\n    const setValue = React.useCallback(\n      (v: TContent[]) => {\n        setModel(Model.clone<T>({\n          ...model,\n          [field]: v,\n        }));\n      },\n      [field, model, setModel],\n    );\n\n    const handleDelete = React.useCallback(\n      (id: number) => {\n        return () => {\n          const newValue: TContent[] = value.filter((v: TContent) => v.id !== id);\n          setValue(newValue);\n        };\n      },\n      [value, setValue],\n    );\n\n    const handleAdd = React.useCallback(\n      () => {\n        const newContent: TContent = new Model() as TContent;\n        newContent.key = v4();\n        if (value instanceof Array) {\n          setValue([\n            ...value,\n            newContent,\n          ]);\n        } else {\n          setValue([\n            newContent,\n          ]);\n        }\n      },\n      [setValue, value],\n    );\n\n    return [value, setValue, handleAdd, handleDelete];\n  }\n\n  public useDefaultList<T1 extends Model, T2 extends Model>(model: T1, field: string): T2[] {\n    return React.useMemo(\n      () => {\n        const reference: T2 = model[field];\n        if (reference) {\n          return [reference];\n        }\n        return [];\n      },\n      [field, model],\n    );\n  }\n\n  public useDetail<T extends Model>(\n    baseRoute: string,\n    getDetail?: (t?: T) => Promise<T>,\n    saveDetail?: (t?: T) => Promise<T>,\n    onSavingError?: (error: Error) => void,\n  ): [\n    T,\n    (t: T) => void,\n    boolean,\n    (loading: boolean) => void,\n    boolean,\n    () => void,\n    () => void,\n  ] {\n    const [t, setT] = React.useState<T>(new Model() as T);\n    const {id} = useParams<DetailParams>();\n    const [loading, setLoading] = React.useState<boolean>(false);\n    const isDetail: boolean = id !== nameof(defaultKeys.add);\n    const history = useHistory();\n\n    const handleGoBack = React.useCallback(\n      () => {\n        history.push(join(baseRoute));\n      },\n      [baseRoute, history],\n    );\n\n    const handleSave = React.useCallback(\n      async () => {\n        setLoading(true);\n        try {\n          const newT: T = await saveDetail(t);\n          if (t?.id) {\n            setT(newT);\n          } else {\n            history.push(join(baseRoute, newT.id));\n          }\n        } catch (error) {\n          if (onSavingError) {\n            onSavingError(error);\n          }\n        }\n        setLoading(false);\n      },\n      [baseRoute, history, onSavingError, saveDetail, t],\n    );\n\n    React.useEffect(\n      () => {\n        if (!!getDetail && isDetail) {\n          setLoading(true);\n          const t: T = Model.clone<Model>({\n            id,\n          }) as T;\n          getDetail(t)\n            .then((t: T) => {\n              setT(t);\n            })\n            .finally(() => {\n              setLoading(false);\n            });\n        }\n      },\n      [getDetail, id, isDetail],\n    );\n\n    return [t, setT, loading, setLoading, isDetail, handleGoBack, handleSave];\n  }\n\n  public useEnumList<T extends Model>(\n    list: () => Promise<T[]>,\n    onError?: (error: Error) => void,\n  ): [T[], (list: T[]) => void, boolean] {\n    const [enums, setEnums] = React.useState<T[]>([]);\n    const [loading, setLoading] = React.useState<boolean>(false);\n    React.useEffect(\n      () => {\n        setLoading(true);\n        list()\n          .then((enums: T[]) => {\n            setEnums(enums);\n          })\n          .catch(onError)\n          .finally(\n            () => {\n              setLoading(false);\n            },\n          );\n      },\n      [list, onError],\n    );\n    return [enums, setEnums, loading];\n  }\n\n  public useFilter<TSearch extends Search, P extends keyof TSearch>(\n    search: TSearch,\n    setSearch: (search: TSearch) => void,\n    field: P,\n  ): [\n    TSearch[P],\n    (filter: TSearch[P]) => void,\n  ] {\n    const filter: TSearch[P] = search[field];\n\n    const setFilter = React.useCallback(\n      (filter: TSearch[P]) => {\n        setSearch(Search.clone<TSearch>({\n          ...search,\n          [field]: filter,\n        }));\n      },\n      [field, search, setSearch],\n    );\n\n    return [filter, setFilter];\n  }\n\n  public useMaster<T extends Model, TSearch extends Search>(\n    baseRoute: string,\n    masterList: (tSearch?: TSearch) => Promise<T[]>,\n    masterCount: (tSearch?: TSearch) => Promise<number>,\n    tSearch: new () => TSearch,\n  ): [\n    T[],\n    TSearch,\n    (tSearch: TSearch) => void,\n    number,\n    boolean,\n    () => void,\n    () => void,\n    (id: number) => () => void,\n    (field: string) => (filter: Filter) => void,\n    boolean,\n    T,\n    (t: T) => () => void,\n    () => void,\n  ] {\n    const [search, setSearch] = React.useState<TSearch>(new tSearch());\n    const [list, setList] = React.useState<T[]>([]);\n    const [loading, setLoading] = React.useState<boolean>(false);\n    const [total, setTotal] = React.useState<number>(0);\n    const history = useHistory();\n    const [previewVisible, setPreviewVisible] = React.useState<boolean>(false);\n    const [previewModel, setPreviewModel] = React.useState<T>(Model.clone<T>());\n\n    const handlePreview = React.useCallback(\n      (t: T) => {\n        return () => {\n          setPreviewModel(t);\n          setPreviewVisible(true);\n        };\n      },\n      [],\n    );\n\n    const handleClosePreview = React.useCallback(\n      () => {\n        setPreviewVisible(false);\n      },\n      [],\n    );\n\n    const handleAdd = React.useCallback(\n      () => {\n        history.push(join(baseRoute, nameof(defaultActions.add)));\n      },\n      [history, baseRoute],\n    );\n\n    const handleEdit = React.useCallback(\n      (id: number) => {\n        return () => {\n          history.push(join(baseRoute, id.toString()));\n        };\n      },\n      [baseRoute, history],\n    );\n\n    const handleReset = React.useCallback(\n      () => {\n        const newSearch: TSearch = Search.clone<TSearch>(search);\n        Object\n          .entries(newSearch)\n          .forEach(([key, value]) => {\n            switch (key) {\n              case nameof(newSearch.skip):\n                newSearch.skip = 0;\n                break;\n\n              case nameof(newSearch.take):\n                newSearch.take = DEFAULT_TAKE;\n                break;\n\n              case nameof(newSearch.orderBy):\n                newSearch.orderBy = undefined;\n                break;\n\n              case nameof(newSearch.orderType):\n                newSearch.orderBy = undefined;\n                break;\n\n              default:\n                if (typeof value === 'object' && value !== null) {\n                  Object\n                    .entries(value)\n                    .forEach(([filterKey]) => {\n                      delete value[filterKey];\n                    });\n                }\n                break;\n            }\n          });\n        setSearch(newSearch);\n      },\n      [search, setSearch],\n    );\n\n    const handleFilter = React.useCallback(\n      (field: string) => {\n        return (filter: Filter) => {\n          setSearch(Search.clone<TSearch>({\n            ...search,\n            [field]: filter,\n          }));\n        };\n      },\n      [search, setSearch],\n    );\n\n    React.useEffect(\n      () => {\n        setLoading(true);\n        Promise.all([\n          masterList(search),\n          masterCount(search),\n        ])\n          .then(([list, total]: [T[], number]) => {\n            setList(list);\n            setTotal(total);\n          })\n          .finally(() => {\n            setLoading(false);\n          });\n      },\n      [masterCount, masterList, search],\n    );\n\n    return [\n      list,\n      search,\n      setSearch,\n      total,\n      loading,\n      handleAdd,\n      handleReset,\n      handleEdit,\n      handleFilter,\n      previewVisible,\n      previewModel,\n      handlePreview,\n      handleClosePreview,\n    ];\n  }\n\n  public usePreloadList<T extends Model, TSearch extends Search>(\n    getList: (search: TSearch) => Promise<T[]>,\n    id: IdFilter,\n  ): T[] {\n    const [list, setList] = React.useState<T[]>([]);\n\n    React.useEffect(\n      () => {\n        getList({id, ...new Search() as TSearch})\n          .then(setList);\n      },\n      [getList, id],\n    );\n\n    return list;\n  }\n}\n\nexport const crudService: CRUDService = new CRUDService();\n","export class RouterService {\n\n}\n\nexport const routerService: RouterService = new RouterService();\n","import {PaginationProps} from 'antd/lib/pagination';\nimport {SorterResult} from 'antd/lib/table';\nimport {antSortType} from 'config/ant-design';\nimport {DEFAULT_TAKE} from 'core/config';\nimport {Model, Search} from 'core/models';\nimport nameof from 'ts-nameof.macro';\n\nexport function setOrderType(search: Search, orderType: string | null | undefined | boolean) {\n  if (typeof orderType === 'undefined') {\n    search.orderType = undefined;\n    return;\n  }\n  if (typeof orderType === 'string') {\n    if (orderType.toUpperCase().startsWith(nameof(antSortType.ASC))) {\n      search.orderType = nameof(antSortType.ASC);\n      return;\n    }\n    search.orderType = nameof(antSortType.DESC);\n    return;\n  }\n  if (typeof orderType === 'boolean') {\n    if (orderType) {\n      return nameof(antSortType.ASC);\n    }\n    search.orderType = nameof(antSortType.DESC);\n    return nameof(antSortType.DESC);\n  }\n  search.orderType = undefined;\n}\n\nexport function getOrderType(search: Search): 'ascend' | 'descend' | undefined {\n  if (search.orderType) {\n    if (search.orderType === nameof(antSortType.ASC)) {\n      return 'ascend';\n    }\n    return 'descend';\n  }\n  return undefined;\n}\n\nexport function getOrderTypeForTable<T extends Model>(field: string, sorter: SorterResult<T>) {\n  return (field === sorter.field) ? sorter.order : undefined;\n}\n\nexport function renderMasterIndex<T extends Model>(pagination?: PaginationProps) {\n  return (...[, , index]: [any, T, number]) => {\n    if (pagination) {\n      const {\n        current = 1,\n        pageSize = DEFAULT_TAKE,\n      } = pagination;\n      return index + 1 + (current - 1) * pageSize;\n    }\n    return index + 1;\n  };\n}\n","import {IdFilter, StringFilter} from 'core/filters';\nimport {Search} from 'core/models';\n\nexport class ProvinceFilter extends Search {\n  public id?: IdFilter = new IdFilter();\n\n  public code?: StringFilter = new StringFilter();\n\n  public name?: StringFilter = new StringFilter();\n}\n","import message from 'antd/lib/message';\nimport Modal from 'antd/lib/modal';\nimport {PaginationConfig, PaginationProps} from 'antd/lib/pagination';\nimport {SorterResult} from 'antd/lib/table';\nimport {AxiosError} from 'axios';\nimport {DEFAULT_TAKE} from 'core/config';\nimport {DateFilter, Filter, GuidFilter, IdFilter, NumberFilter, StringFilter} from 'core/filters';\nimport {translate} from 'core/helpers';\nimport {Model, Search} from 'core/models';\nimport {getOrderType, getOrderTypeForTable, setOrderType} from 'helpers/ant-design/table';\nimport {Moment} from 'moment';\nimport {useTranslation} from 'react-i18next';\nimport React from 'reactn';\nimport nameof from 'ts-nameof.macro';\n\nconst DEFAULT_SUCCESS_MESSAGE: string = translate('general.delete.success');\nconst DEFAULT_FAILURE_MESSAGE: string = translate('general.delete.failure');\nconst DEFAULT_TITLE_MESSAGE: string = translate('general.delete.title');\nconst DEFAULT_CONTENT_MESSAGE: string = translate('general.delete.content');\n\nexport type FilterHandlerType<TSearch extends Search> = (list: any[], search?: TSearch) => any[];\n\nexport class TableService {\n  public static hasType(filter: Filter) {\n    return Object.keys(filter).length > 0;\n  }\n\n  public useDeleteHandler<T extends Model>(\n    onDelete: (t: T) => Promise<T>,\n    onSetLoading: (loading: boolean) => void,\n    model: T,\n    setModel: (t: T) => void,\n    onSuccess?: (t?: T) => void,\n    onError?: (error: Error) => void,\n    onCancel?: () => void,\n  ) {\n    const [translate] = useTranslation();\n    return React.useMemo(\n      () => {\n        return () => {\n          Modal.confirm({\n            title: translate(DEFAULT_TITLE_MESSAGE, model),\n            content: translate(DEFAULT_CONTENT_MESSAGE, model),\n            okType: 'danger',\n            onOk: () => {\n              onSetLoading(true);\n              onDelete(model)\n                .then(() => {\n                  message.info(translate(DEFAULT_SUCCESS_MESSAGE, model));\n                  if (typeof onSuccess === 'function') {\n                    onSuccess();\n                  }\n                })\n                .catch((error: AxiosError<T>) => {\n                  message.error(translate(DEFAULT_FAILURE_MESSAGE, {error, ...model}));\n                  setModel(Model.clone<T>({\n                    ...model,\n                    errors: error.response.data,\n                  }));\n                  if (typeof onError === 'function') {\n                    onError(error);\n                  }\n                })\n                .finally(\n                  () => {\n                    onSetLoading(false);\n                  },\n                );\n            },\n            onCancel,\n          });\n        };\n      },\n      // tslint:disable-next-line:max-line-length\n      [model, onCancel, onDelete, onError, onSetLoading, onSuccess, setModel, translate],\n    );\n  }\n\n  public useLocalTable<T extends Model, TSearch extends Search>(\n    list: T[],\n    search: TSearch,\n    setSearch: (search: TSearch) => void,\n    filterHandler: FilterHandlerType<TSearch> = this.defaultFilterHandler,\n  ): [\n    T[],\n    PaginationProps,\n    SorterResult<TSearch>,\n    (newPagination: PaginationConfig, filters: Record<string, any>, newSorter: SorterResult<T>) => void,\n    (field: string) => (filter: Filter) => void,\n  ] {\n    const sorter: SorterResult<TSearch> = React.useMemo(\n      () => ({\n        field: search.orderBy,\n        order: getOrderType(search),\n        columnKey: search.orderBy,\n        column: undefined,\n      }),\n      [search],\n    );\n\n    const dataSource: T[] = React.useMemo(\n      () => {\n        return filterHandler(list, search);\n      },\n      [filterHandler, list, search],\n    );\n\n    const pagination: PaginationProps = React.useMemo(\n      () => {\n        const {\n          skip,\n          take,\n        } = search;\n\n        const {length} = dataSource ?? [];\n\n        return {\n          current: (skip / take) + 1,\n          pageSize: take,\n          total: length,\n        };\n      },\n      [dataSource, search],\n    );\n\n    const handleTableChange = React.useCallback(\n      (\n        newPagination: PaginationConfig,\n        filters: Record<string, any>,\n        newSorter: SorterResult<T>,\n      ) => {\n        const {pageSize: take} = newPagination;\n        const skip: number = (newPagination.current - 1) * newPagination.pageSize;\n\n        if (skip !== search.skip || take !== search.take) {\n          setSearch(Search.clone<TSearch>({\n            ...search,\n            skip,\n            take,\n          }));\n          return;\n        }\n\n        const {field, order} = sorter;\n\n        if (newSorter.field !== field || newSorter.order !== order) {\n          setSearch(Search.clone<TSearch>({\n            ...search,\n            orderBy: newSorter.field,\n            orderType: getOrderTypeForTable<T>(newSorter.field, newSorter),\n          }));\n          return;\n        }\n\n        setSearch(Search.clone<TSearch>({\n          ...search,\n          ...filters,\n        }));\n      },\n      [search, setSearch, sorter],\n    );\n\n    const handleFilter = React.useCallback(\n      (field: string) => {\n        return (filter: Filter) => {\n          setSearch(Search.clone<TSearch>({\n            ...search,\n            [field]: filter,\n          }));\n        };\n      },\n      [search, setSearch],\n    );\n\n    return [dataSource, pagination, sorter, handleTableChange, handleFilter];\n  }\n\n  public useMasterTable<T extends Model, TSearch extends Search>(\n    search: TSearch,\n    setSearch: (search: TSearch) => void,\n    total: number,\n  ): [\n    PaginationProps,\n    SorterResult<T>,\n    (pagination: PaginationProps, filters: Record<string, any>, newSorter: SorterResult<T>) => void,\n  ] {\n\n    const pagination: PaginationProps = React.useMemo(\n      () => ({\n        total,\n        current: search.skip / search.take + 1,\n        pageSize: search.take,\n      }),\n      [search.skip, search.take, total],\n    );\n\n    const sorter: SorterResult<T> = React.useMemo(\n      () => ({\n        field: search.orderBy,\n        order: getOrderType(search),\n      } as SorterResult<T>),\n      [search],\n    );\n\n    const handleTableChange = React.useCallback(\n      (\n        newPagination: PaginationProps,\n        filters: Record<string, any>,\n        newSorter: SorterResult<T>,\n      ) => {\n        const {field, order} = sorter;\n        if (newSorter.field !== field || newSorter.order !== order) {\n          const newSearch: TSearch = Search.clone<TSearch>({\n            ...search,\n            orderBy: newSorter.field,\n            skip: 0,\n          });\n          setOrderType(newSearch, newSorter.order);\n          setSearch(newSearch);\n          return;\n        }\n        const {\n          current = 1,\n          pageSize = DEFAULT_TAKE,\n          total = 0,\n        } = newPagination;\n        if (pagination.current !== current || pagination.pageSize !== pageSize || pagination.total !== total) {\n          setSearch(Search.clone<TSearch>({\n            ...search,\n            take: pageSize,\n            skip: (current - 1) * pageSize,\n          }));\n          return;\n        }\n        setSearch(Search.clone<TSearch>({\n          ...search,\n          ...filters,\n        }));\n      },\n      [pagination, search, setSearch, sorter],\n    );\n    return [pagination, sorter, handleTableChange];\n  }\n\n  private defaultFilterHandler<T extends Model, TSearch extends Search>(list: T[], search?: TSearch) {\n    if (search) {\n      Object\n        .entries(search)\n        .forEach(([key, value]) => {\n          switch (key) {\n            case nameof(search.skip):\n\n              break;\n\n            case nameof(search.take):\n\n              break;\n\n            case nameof(search.orderBy):\n\n              break;\n\n            case nameof(search.orderType):\n\n              break;\n\n            default:\n              if (value instanceof Filter && TableService.hasType(value)) {\n                if (value instanceof StringFilter) {\n                  Object\n                    .entries(value)\n                    .forEach(([filterKey, filterValue]) => {\n                      switch (filterKey) {\n                        case nameof(value.startWith):\n                          list = list.filter((t: T) => {\n                            return (t[key] as string)?.startsWith(filterValue);\n                          });\n                          break;\n\n                        case nameof(value.endWith):\n                          list = list.filter((t: T) => {\n                            return (t[key] as string)?.endsWith(filterValue);\n                          });\n                          break;\n\n                        case nameof(value.contain):\n                          list = list.filter((t: T) => {\n                            return (t[key] as string)?.indexOf(filterValue) >= 0;\n                          });\n                          break;\n\n                        default:\n                          // Do nothing\n                          break;\n                      }\n                    });\n                } else if (value instanceof NumberFilter) {\n                  Object\n                    .entries(value)\n                    .forEach(([filterKey, filterValue]) => {\n                      switch (filterKey) {\n                        case nameof(value.range):\n                          list = list.filter((t: T) => {\n                            const v: number = t[key] as number;\n                            if (typeof v === 'number') {\n                              let result: boolean = true;\n                              if (filterValue instanceof Array) {\n                                if (typeof filterValue[0] === 'number') {\n                                  result = result && v >= filterValue[0];\n                                }\n                                if (typeof filterValue[1] === 'number') {\n                                  result = result && v <= filterValue[1];\n                                }\n                              }\n                              return result;\n                            }\n                            return true;\n                          });\n                          break;\n\n                        case nameof(value.equal):\n                          list = list.filter((t: T) => {\n                            const v: number = t[key] as number;\n                            if (typeof v === 'number' && typeof filterValue === 'number') {\n                              return v === filterValue;\n                            }\n                            return true;\n                          });\n                          break;\n\n                        case nameof(value.notEqual):\n                          list = list.filter((t: T) => {\n                            const v: number = t[key] as number;\n                            if (typeof v === 'number' && typeof filterValue === 'number') {\n                              return v !== filterValue;\n                            }\n                            return true;\n                          });\n                          break;\n\n                        case nameof(value.less):\n                          list = list.filter((t: T) => {\n                            const v: number = t[key] as number;\n                            if (typeof v === 'number' && typeof filterValue === 'number') {\n                              return v < filterValue;\n                            }\n                            return true;\n                          });\n                          break;\n\n                        case nameof(value.greater):\n                          list = list.filter((t: T) => {\n                            const v: number = t[key] as number;\n                            if (typeof v === 'number' && typeof filterValue === 'number') {\n                              return v > filterValue;\n                            }\n                            return true;\n                          });\n                          break;\n\n                        case nameof(value.lessEqual):\n                          list = list.filter((t: T) => {\n                            const v: number = t[key] as number;\n                            if (typeof v === 'number' && typeof filterValue === 'number') {\n                              return v <= filterValue;\n                            }\n                            return true;\n                          });\n                          break;\n\n                        case nameof(value.greaterEqual):\n                          list = list.filter((t: T) => {\n                            const v: number = t[key] as number;\n                            if (typeof v === 'number' && typeof filterValue === 'number') {\n                              return v >= filterValue;\n                            }\n                            return true;\n                          });\n                          break;\n\n                        default:\n                          // Do nothing\n                          break;\n                      }\n                    });\n                } else if (value instanceof DateFilter) {\n                  Object\n                    .entries(value)\n                    .forEach(([filterKey, filterValue]) => {\n                      switch (filterKey) {\n                        case nameof(value.range):\n                          list = list.filter((t: T) => {\n                            const v: number = (t[key] as Moment)?.toDate().getTime();\n                            if (typeof v === 'number') {\n                              const [minValue, maxValue] = (filterValue ?? []) as [Moment, Moment];\n                              let result: boolean = true;\n                              if (minValue !== null && typeof minValue === 'object') {\n                                const minTimeValue: number = minValue.toDate().getTime();\n                                result = result && minTimeValue <= v;\n                              }\n                              if (maxValue !== null && typeof maxValue === 'object') {\n                                const maxTimeValue: number = maxValue.toDate().getTime();\n                                result = result && maxTimeValue >= v;\n                              }\n                              return result;\n                            }\n                            return true;\n                          });\n                          break;\n\n                        case nameof(value.equal):\n                          list = list.filter((t: T) => {\n                            const v: number = (t[key] as Moment)?.toDate().getTime();\n                            if (typeof v === 'number' && typeof filterValue === 'object' && filterValue !== null) {\n                              const comparisonValue: number = (filterValue as Moment)?.toDate().getTime();\n                              if (typeof comparisonValue === 'number') {\n                                return v === comparisonValue;\n                              }\n                              return true;\n                            }\n                            return true;\n                          });\n                          break;\n\n                        case nameof(value.notEqual):\n                          list = list.filter((t: T) => {\n                            const v: number = (t[key] as Moment)?.toDate().getTime();\n                            if (typeof v === 'number' && typeof filterValue === 'object' && filterValue !== null) {\n                              const comparisonValue: number = (filterValue as Moment)?.toDate().getTime();\n                              if (typeof comparisonValue === 'number') {\n                                return v !== comparisonValue;\n                              }\n                              return true;\n                            }\n                            return true;\n                          });\n                          break;\n\n                        case nameof(value.less):\n                          list = list.filter((t: T) => {\n                            const v: number = (t[key] as Moment)?.toDate().getTime();\n                            if (typeof v === 'number' && typeof filterValue === 'object' && filterValue !== null) {\n                              const comparisonValue: number = (filterValue as Moment)?.toDate().getTime();\n                              if (typeof comparisonValue === 'number') {\n                                return v < comparisonValue;\n                              }\n                              return true;\n                            }\n                            return true;\n                          });\n                          break;\n\n                        case nameof(value.greater):\n                          list = list.filter((t: T) => {\n                            const v: number = (t[key] as Moment)?.toDate().getTime();\n                            if (typeof v === 'number' && typeof filterValue === 'object' && filterValue !== null) {\n                              const comparisonValue: number = (filterValue as Moment)?.toDate().getTime();\n                              if (typeof comparisonValue === 'number') {\n                                return v > comparisonValue;\n                              }\n                              return true;\n                            }\n                            return true;\n                          });\n                          break;\n\n                        case nameof(value.lessEqual):\n                          list = list.filter((t: T) => {\n                            const v: number = (t[key] as Moment)?.toDate().getTime();\n                            if (typeof v === 'number' && typeof filterValue === 'object' && filterValue !== null) {\n                              const comparisonValue: number = (filterValue as Moment)?.toDate().getTime();\n                              if (typeof comparisonValue === 'number') {\n                                return v <= comparisonValue;\n                              }\n                              return true;\n                            }\n                            return true;\n                          });\n                          break;\n\n                        case nameof(value.greaterEqual):\n                          list = list.filter((t: T) => {\n                            const v: number = (t[key] as Moment)?.toDate().getTime();\n                            if (typeof v === 'number' && typeof filterValue === 'object' && filterValue !== null) {\n                              const comparisonValue: number = (filterValue as Moment)?.toDate().getTime();\n                              if (typeof comparisonValue === 'number') {\n                                return v >= comparisonValue;\n                              }\n                              return true;\n                            }\n                            return true;\n                          });\n                          break;\n\n                        default:\n                          // Do nothing\n                          break;\n                      }\n                    });\n                } else if (value instanceof IdFilter || value instanceof GuidFilter) {\n                  Object\n                    .entries(value)\n                    .forEach(([filterKey, filterValue]) => {\n                      switch (filterKey) {\n                        case nameof(value.equal):\n                          list = list.filter((t: T) => {\n                            const v: number = t[key] as number;\n                            if ((typeof v === 'number' || typeof value === 'string') && (typeof filterValue === 'number' || typeof filterValue === 'string')) {\n                              return v === filterValue;\n                            }\n                            return true;\n                          });\n                          break;\n\n                        case nameof(value.notEqual):\n                          list = list.filter((t: T) => {\n                            const v: number = t[key] as number;\n                            if ((typeof v === 'number' || typeof value === 'string') && (typeof filterValue === 'number' || typeof filterValue === 'string')) {\n                              return v !== filterValue;\n                            }\n                            return true;\n                          });\n                          break;\n\n                        case nameof(value.in):\n                          list = list.filter((t: T) => {\n                            const v: number = t[key] as number;\n                            if ((typeof v === 'number' || typeof value === 'string') && (filterValue instanceof Array)) {\n                              return filterValue.includes(v);\n                            }\n                            return true;\n                          });\n                          break;\n\n                        case nameof(value.notIn):\n                          list = list.filter((t: T) => {\n                            const v: number = t[key] as number;\n                            if ((typeof v === 'number' || typeof value === 'string') && (filterValue instanceof Array)) {\n                              return !filterValue.includes(v);\n                            }\n                            return true;\n                          });\n                          break;\n\n                        default:\n                          // Do nothing\n                          break;\n                      }\n                    });\n                }\n              }\n              break;\n          }\n        });\n      return list;\n    }\n    return list;\n  }\n}\n\nexport const antTableService: TableService = new TableService();\n","export default 'api-consts';\n\nexport const API_ACCOUNT_MASTER_ROUTE: string = '/api/account/account-master';\nexport const API_ACCOUNT_DETAIL_ROUTE: string = '/api/account/account-detail';\nexport const API_DISTRICT_MASTER_ROUTE: string = '/api/district/district-master';\nexport const API_DISTRICT_DETAIL_ROUTE: string = '/api/district/district-detail';\nexport const API_GROUP_MASTER_ROUTE: string = '/api/group/group-master';\nexport const API_GROUP_DETAIL_ROUTE: string = '/api/group/group-detail';\nexport const API_ORDER_CONTENT_MASTER_ROUTE: string = '/api/order-content/order-content-master';\nexport const API_ORDER_CONTENT_DETAIL_ROUTE: string = '/api/order-content/order-content-detail';\nexport const API_ORDER_MASTER_ROUTE: string = '/api/order/order-master';\nexport const API_ORDER_DETAIL_ROUTE: string = '/api/order/order-detail';\nexport const API_PROVINCE_MASTER_ROUTE: string = '/api/province/province-master';\nexport const API_PROVINCE_DETAIL_ROUTE: string = '/api/province/province-detail';\nexport const API_WARD_MASTER_ROUTE: string = '/api/ward/ward-master';\nexport const API_WARD_DETAIL_ROUTE: string = '/api/ward/ward-detail';\n","/* tslint:disable:variable-name */\nimport {AxiosInstance, AxiosRequestConfig, AxiosResponse} from 'axios';\nimport {createHttpService} from 'core/helpers/http';\n\nexport class Repository {\n\n  private static _defaultRequestInterceptor: (v: AxiosRequestConfig) => AxiosRequestConfig | Promise<AxiosRequestConfig>;\n\n  private static _defaultResponseInterceptor: (v: AxiosResponse<any>) => AxiosResponse<any> | Promise<AxiosResponse<any>>;\n\n  protected http: AxiosInstance;\n\n  constructor(\n    config?: AxiosRequestConfig,\n    requestInterceptor?: (config: AxiosRequestConfig) => AxiosRequestConfig,\n    responseInterceptor?: (response: AxiosResponse) => any,\n  ) {\n    this.http = createHttpService(config, requestInterceptor, responseInterceptor);\n    if (typeof Repository._defaultRequestInterceptor === 'function') {\n      this.http.interceptors.request.use(Repository._defaultRequestInterceptor);\n    }\n    if (typeof Repository._defaultResponseInterceptor === 'function') {\n      this.http.interceptors.response.use(Repository._defaultResponseInterceptor);\n    }\n  }\n\n  public setBaseURL(baseURL: string) {\n    this.http.defaults.baseURL = baseURL;\n  }\n\n  public getHttpInstance(): AxiosInstance {\n    return this.http;\n  }\n\n  static set defaultRequestInterceptor(value: (v: AxiosRequestConfig) => (AxiosRequestConfig | Promise<AxiosRequestConfig>)) {\n    this._defaultRequestInterceptor = value;\n  }\n\n  static set defaultResponseInterceptor(value: (v: AxiosResponse<any>) => (AxiosResponse<any> | Promise<AxiosResponse<any>>)) {\n    this._defaultResponseInterceptor = value;\n  }\n}\n","import axios, {AxiosInstance, AxiosRequestConfig, AxiosResponse} from 'axios';\n\nexport function createHttpService(\n  config: AxiosRequestConfig,\n  requestInterceptor?: (config: AxiosRequestConfig) => AxiosRequestConfig,\n  responseInterceptor?: (response: AxiosResponse) => any,\n): AxiosInstance {\n  const instance: AxiosInstance = axios.create(config);\n  if (requestInterceptor) {\n    instance.interceptors.request.use(requestInterceptor);\n  }\n  if (responseInterceptor) {\n    instance.interceptors.response.use(responseInterceptor);\n  }\n  return instance;\n}\n","import {Model} from 'core/models';\nimport {ErrorMap, PureModelData} from 'core/types';\nimport {District} from './District';\n\nexport class Ward extends Model {\n  public static clone<T extends Model = Ward>(ward?: PureModelData<Ward>): T | null {\n    const instance: T = new Model() as T;\n    if (typeof ward !== 'undefined' && ward !== null) {\n      Object.assign(instance,\n        {\n          ...ward,\n\n          district: District?.clone<District>(ward.district),\n        });\n      return instance;\n    }\n    return null;\n  }\n\n  public id?: number;\n\n  public code?: string;\n\n  public name?: string;\n\n  public districtId?: number;\n\n  public district?: District;\n\n  public errors?: ErrorMap<Ward>;\n}\n","import {Model} from 'core/models';\nimport {ErrorMap, PureModelData} from 'core/types';\nimport {Province} from './Province';\nimport {Ward} from './Ward';\n\nexport class District extends Model {\n  public static clone<T extends Model = District>(district?: PureModelData<District>): T | null {\n    const instance: T = new Model() as T;\n    if (typeof district !== 'undefined' && district !== null) {\n      Object.assign(instance,\n        {\n          ...district,\n          province: Province?.clone<Province>(district.province),\n          wards: district.wards?.map((ward: Ward) => Ward.clone<Ward>(ward)),\n        });\n      return instance;\n    }\n    return null;\n  }\n\n  public id?: number;\n\n  public code?: string;\n\n  public name?: string;\n\n  public provinceId?: number;\n\n  public province?: Province;\n\n  public wards?: Ward[];\n\n  public errors?: ErrorMap<District>;\n}\n","import {Model} from 'core/models';\nimport {ErrorMap, PureModelData} from 'core/types';\nimport {District} from './District';\n\nexport class Province extends Model {\n  public static clone<T extends Model = Province>(province?: PureModelData<Province>): T | null {\n    const instance: T = new Model() as T;\n    if (typeof province !== 'undefined' && province !== null) {\n      Object.assign(instance,\n        {\n          ...province,\n\n          districts: province.districts?.map((district: District) => District.clone<District>(district)),\n        });\n      return instance;\n    }\n    return null;\n  }\n\n  public id?: number;\n\n  public code?: string;\n\n  public name?: string;\n\n  public districts?: District[];\n\n  public errors?: ErrorMap<Province>;\n}\n","import {AxiosResponse} from 'axios';\n\nimport {API_PROVINCE_MASTER_ROUTE} from 'config/api-consts';\nimport {url} from 'core/helpers/url';\nimport {Repository} from 'core/repositories';\nimport {PureModelData} from 'core/types';\nimport kebabCase from 'lodash/kebabCase';\nimport {Province} from 'models/Province';\nimport {ProvinceFilter} from 'models/ProvinceFilter';\nimport nameof from 'ts-nameof.macro';\n\nexport class ProvinceMasterRepository extends Repository {\n  constructor() {\n    super();\n    this.setBaseURL(url(API_PROVINCE_MASTER_ROUTE));\n  }\n\n  public count = (provinceFilter: ProvinceFilter): Promise<number> => {\n    return this.http.post<number>(kebabCase(nameof(this.count)), provinceFilter)\n      .then((response: AxiosResponse<number>) => {\n        return response.data;\n      });\n  };\n\n  public list = (provinceFilter: ProvinceFilter): Promise<Province[]> => {\n    return this.http.post<Province[]>(kebabCase(nameof(this.list)), provinceFilter)\n      .then((response: AxiosResponse<Array<PureModelData<Province>>>) => {\n        return response.data.map((province: PureModelData<Province>) => {\n          return Province.clone<Province>(province);\n        });\n      });\n  };\n\n  public get = (province: Province): Promise<Province> => {\n    return this.http.post<Province>(kebabCase(nameof(this.get)), province)\n      .then((response: AxiosResponse<PureModelData<Province>>) => {\n        return Province.clone<Province>(response.data);\n      });\n  };\n\n}\n\nexport const provinceMasterRepository: ProvinceMasterRepository = new ProvinceMasterRepository();\n","import {BASE_URL} from 'core/config/consts';\nimport {join} from 'path';\n\nexport function url(...segments: string[]) {\n  return `${BASE_URL}${join(...segments)}`;\n}\n","import Card from 'antd/lib/card';\nimport Empty from 'antd/lib/empty';\nimport Form from 'antd/lib/form';\nimport {Col, Row} from 'antd/lib/grid';\nimport Table, {ColumnProps} from 'antd/lib/table';\nimport AdvancedStringFilter from 'components/ant-design/AdvancedStringFilter/AdvancedStringFilter';\nimport MasterPreview from 'components/MasterPreview/MasterPreview';\nimport {formItemLayout} from 'config/ant-design';\nimport {defaultColumnWidth} from 'config/consts';\nimport {PROVINCE_ROUTE} from 'config/route-consts';\nimport {defaultKeys} from 'core/config';\nimport {crudService} from 'core/services';\nimport {getOrderTypeForTable, renderMasterIndex} from 'helpers/ant-design/table';\nimport {Province} from 'models/Province';\nimport {ProvinceFilter} from 'models/ProvinceFilter';\nimport React from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {antTableService} from 'services';\nimport nameof from 'ts-nameof.macro';\nimport 'views/DefaultViews/ProvinceView/ProvinceMaster/ProvinceMaster.scss';\nimport {provinceMasterRepository} from 'views/DefaultViews/ProvinceView/ProvinceMaster/ProvinceMasterRepository';\n\nconst {Item: FormItem} = Form;\n\nfunction ProvinceMaster() {\n  const [translate] = useTranslation();\n  const [\n    provinces,\n    search,\n    setSearch,\n    total,\n    loading,\n    handleAdd,\n    handleReset,\n    handleEdit,\n    handleFilter,\n    visible,\n    province,\n    handlePreview,\n    handleClosePreview,\n  ] = crudService.useMaster<Province, ProvinceFilter>(\n    PROVINCE_ROUTE,\n    provinceMasterRepository.list,\n    provinceMasterRepository.count,\n    ProvinceFilter,\n  );\n\n  const [pagination, sorter, handleTableChange] = antTableService.useMasterTable(search, setSearch, total);\n\n  const columns: Array<ColumnProps<Province>> = React.useMemo(\n    () => [\n      {\n        title: translate('general.keys.index'),\n        key: nameof(defaultKeys.index),\n        width: defaultColumnWidth.index,\n        render: renderMasterIndex<Province>(pagination),\n      },\n      {\n        title: translate('provinces.id'),\n        key: nameof(province.id),\n        sorter: true,\n        sortOrder: getOrderTypeForTable<Province>(nameof(province.id), sorter),\n        dataIndex: nameof(province.id),\n      },\n      {\n        title: translate('provinces.code'),\n        sorter: true,\n        sortOrder: getOrderTypeForTable<Province>(nameof(province.code), sorter),\n      },\n      {\n        title: translate('provinces.name'),\n        key: nameof(province.name),\n        dataIndex: nameof(province.name),\n        sorter: true,\n        sortOrder: getOrderTypeForTable<Province>(nameof(province.name), sorter),\n      },\n      {\n        title: translate('general.actions.label'),\n        key: nameof(defaultKeys.actions),\n        dataIndex: nameof(province.id),\n        width: defaultColumnWidth.actions,\n        align: 'center',\n        render(id: number, province: Province) {\n          return (\n            <div className=\"d-flex justify-content-center\">\n              <button className=\"btn btn-link text-warning\" onClick={handlePreview(province)}>\n                <i className=\"fa fa-eye\"/>\n              </button>\n              <button className=\"btn btn-link\" onClick={handleEdit(id)}>\n                <i className=\"fa fa-edit\"/>\n              </button>\n            </div>\n          );\n        },\n      },\n    ],\n    [handleEdit, handlePreview, pagination, province.code, province.id, province.name, sorter, translate],\n  );\n\n  return (\n    <>\n      <Card title={translate('provinces.master.title')}>\n        <Card className=\"mb-2\">\n          <Form {...formItemLayout}>\n            <Row>\n              <Col className=\"pl-1\" span={8}>\n                <FormItem className=\"mb-0\" label={translate('provinces.id')}>\n                  <AdvancedStringFilter defaultType={nameof(search.id.equal)}\n                                        onChange={handleFilter(nameof(province.id))}\n                                        filter={search.id}\n                                        className=\"w-100\"/>\n                </FormItem>\n              </Col>\n              <Col className=\"pl-1\" span={8}>\n                <FormItem className=\"mb-0\" label={translate('provinces.code')}>\n                  <AdvancedStringFilter defaultType={nameof(search.code.startWith)}\n                                        onChange={handleFilter(nameof(province.code))}\n                                        filter={search.code}\n                                        className=\"w-100\"/>\n                </FormItem>\n              </Col>\n              <Col className=\"pl-1\" span={8}>\n                <FormItem className=\"mb-0\" label={translate('provinces.name')}>\n                  <AdvancedStringFilter defaultType={nameof(search.name.startWith)}\n                                        onChange={handleFilter(nameof(province.name))}\n                                        filter={search.name}\n                                        className=\"w-100\"/>\n                </FormItem>\n              </Col>\n            </Row>\n            <div className=\"d-flex justify-content-end\">\n              <button className=\"btn btn-primary mr-2\">\n                {translate('general.actions.filter')}\n              </button>\n              <button className=\"btn btn-outline-secondary text-dark\" onClick={handleReset}>\n                <i className=\"fa mr-2 fa-times\"/>\n                {translate('general.actions.reset')}\n              </button>\n            </div>\n          </Form>\n        </Card>\n        <Table dataSource={provinces}\n               columns={columns}\n               bordered\n               size=\"small\"\n               tableLayout=\"fixed\"\n               loading={loading}\n               rowKey={nameof(province.id)}\n               pagination={pagination}\n               onChange={handleTableChange}\n               title={() => (\n                 <>\n                   <div className=\"d-flex justify-content-between\">\n                     <div className=\"flex-shrink-1 d-flex align-items-center\">\n                       <button className=\"btn btn-primary mr-2\" onClick={handleAdd}>\n                         <i className=\"fa mr-2 fa-plus\"/>\n                         {translate('general.actions.add')}\n                       </button>\n                     </div>\n                     <div className=\"flex-shrink-1 d-flex align-items-center\">\n                       {translate('general.master.pagination', {pageSize: pagination.pageSize, total})}\n                     </div>\n                   </div>\n                 </>\n               )}\n        />\n        <MasterPreview isOpen={visible} onClose={handleClosePreview} size=\"xl\">\n          <Empty/>\n        </MasterPreview>\n      </Card>\n    </>\n  );\n}\n\nexport default ProvinceMaster;\n","import React from 'react';\nimport {Switch, withRouter} from 'react-router';\nimport {renderRoutes, RouteConfigComponentProps} from 'react-router-config';\nimport 'views/DefaultViews/ProvinceView/ProvinceView.scss';\n\nfunction ProvinceView(props: RouteConfigComponentProps) {\n  const {route} = props;\n\n  return (\n    <Switch>\n      {route?.routes instanceof Array && renderRoutes(route.routes)}\n    </Switch>\n  );\n}\n\nexport default withRouter(ProvinceView);\n","import {PROVINCE_ROUTE, ROOT_ROUTE} from 'config/route-consts';\nimport {defaultActions} from 'core/config';\nimport {translate} from 'core/helpers';\nimport CoreUILayout from 'layouts/CoreUILayout/CoreUILayout';\nimport path from 'path';\nimport {RouteConfig} from 'react-router-config';\nimport nameof from 'ts-nameof.macro';\nimport ProvinceDetail from 'views/DefaultViews/ProvinceView/ProvinceDetail/ProvinceDetail';\nimport ProvinceMaster from 'views/DefaultViews/ProvinceView/ProvinceMaster/ProvinceMaster';\nimport ProvinceView from 'views/DefaultViews/ProvinceView/ProvinceView';\n\nexport const routes: RouteConfig[] = [\n  {\n    path: ROOT_ROUTE,\n    component: CoreUILayout,\n    name: translate('menu.root'),\n    routes: [\n      {\n        path: PROVINCE_ROUTE,\n        component: ProvinceView,\n        name: translate('menu.provinces.name'),\n        routes: [\n          {\n            path: path.join(PROVINCE_ROUTE, nameof(defaultActions.add)),\n            component: ProvinceDetail,\n            name: translate('menu.provinces.add'),\n          },\n          {\n            path: path.join(PROVINCE_ROUTE, ':id'),\n            component: ProvinceDetail,\n            name: translate('menu.provinces.detail'),\n          },\n          {\n            path: path.join(PROVINCE_ROUTE),\n            component: ProvinceMaster,\n            name: translate('menu.provinces.master'),\n            exact: true,\n          },\n        ],\n      },\n    ],\n  },\n];\n","import {GlobalState} from 'core/config';\nimport {renderRoutes, RouteConfig} from 'react-router-config';\nimport {Switch} from 'react-router-dom';\nimport React from 'reactn';\n\nexport interface AppProps {\n  routes?: RouteConfig[];\n}\n\nfunction App(props: AppProps) {\n  const {routes} = props;\n\n  const [title] = React.useGlobal<GlobalState, 'title'>('title');\n\n  React.useEffect(\n    () => {\n      document.title = title;\n    },\n    [title],\n  );\n\n  return (\n    <Switch>\n      {renderRoutes(routes)}\n    </Switch>\n  );\n}\n\nexport default App;\n","/* tslint:disable:no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import {ROOT_ID} from 'config/consts';\nimport initialI18NextConfig from 'config/i18next';\nimport {routes} from 'config/routes';\nimport App from 'core/components/App/App';\nimport initialGlobalState, {GlobalState} from 'core/config/global';\nimport {changeLanguage} from 'core/helpers';\nimport i18next from 'i18next';\nimport ReactDOM from 'react-dom';\nimport {initReactI18next} from 'react-i18next';\nimport {BrowserRouter} from 'react-router-dom';\nimport React, {setGlobal} from 'reactn';\nimport * as serviceWorker from 'service-worker';\nimport 'styles';\n\nPromise.all([\n  i18next.use(initReactI18next)\n    .init(initialI18NextConfig)\n    .then(() => {\n      return changeLanguage('vi');\n    }),\n  setGlobal<GlobalState>(initialGlobalState),\n])\n  .then(() => {\n    const root: HTMLDivElement = document.getElementById(ROOT_ID) as HTMLDivElement;\n    (root.hasChildNodes() ? ReactDOM.hydrate : ReactDOM.render)(\n      <BrowserRouter>\n        <App routes={routes}/>\n      </BrowserRouter>,\n      root,\n    );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n    serviceWorker.unregister();\n  });\n"],"sourceRoot":""}