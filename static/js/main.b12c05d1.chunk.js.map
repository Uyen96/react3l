{"version":3,"sources":["core/config/consts.ts","core/config/global.ts","config/consts.ts","config/i18next.ts","layouts/DefaultLayout/DefaultLayout.tsx","config/menu.ts","config/routes.tsx","config/route-consts.ts","core/components/App/App.tsx","core/components/AppLoading/AppLoading.tsx","core/helpers/i18next.ts","service-worker.ts","index.tsx"],"names":["parseInt","process","INPUT_DEBOUNCE_TIME","DATE_FORMAT","TIME_FORMAT","initialGlobalState","language","fallbackLanguage","loading","title","i18nextConfig","resources","lng","fallbackLng","ns","defaultNS","nsSeparator","keySeparator","interpolation","escapeValue","nestingSuffixEscaped","prefix","suffix","Header","Layout","Sider","Content","Footer","SubMenu","Menu","DefaultLayout","props","route","className","contentClassName","headerClassName","mainClassName","menu","useTranslation","translate","classNames","theme","mode","renderMenu","map","item","Fragment","key","path","to","activeClassName","exact","role","icon","type","matIcon","children","renderRoutes","routes","defaultProps","withRouter","component","App","React","useGlobal","useEffect","document","AppLoading","setLoading","spinning","a","setGlobal","axios","get","join","then","response","i18next","addResource","data","changeLanguage","Boolean","window","location","hostname","match","Promise","all","use","initReactI18next","init","initialI18NextConfig","root","getElementById","hasChildNodes","ReactDOM","hydrate","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b12c05d1.chunk.js","sourcesContent":["import {FormProps} from 'antd/lib/form';\nimport {translate} from 'core/helpers/translate';\n\nexport const MASTER_KEYS: { [key: string]: string } = {\n  index: translate('general.master.index'),\n  actions: translate('general.master.actions'),\n};\n\nexport const DETAIL_KEYS: { [key: string]: string } = {\n  add: 'add',\n};\n\nexport const formItemLayout: FormProps = {\n  labelCol: {\n    xs: {span: 24},\n    sm: {span: 8},\n  },\n  wrapperCol: {\n    xs: {span: 24},\n    sm: {span: 16},\n  },\n};\n\ninterface SortType {\n  ASC: string;\n\n  DESC: string;\n}\n\nexport const SORT_TYPES: SortType = {\n  ASC: 'ascend',\n  DESC: 'descend',\n};\n\nexport const DEFAULT_TAKE: number = 10;\n\nexport const BASE_URL: string = process.env.REACT_APP_BASE_URL ?? '';\n\nexport const INPUT_DEBOUNCE_TIME: number = parseInt(process.env.INPUT_DEBOUNCE_TIME, 10) ?? 400;\n\nexport const DATE_FORMAT: string = 'YYYY-MM-DD';\n\nexport const TIME_FORMAT: string = 'HH:mm:ss';\n\nexport const DATE_TIME_FORMAT: string = `${DATE_FORMAT} ${TIME_FORMAT}`;\n","import {APP_TITLE} from '../../config/consts';\n\nexport type LanguageType = 'en' | 'vi';\n\nexport interface GlobalState {\n  language?: LanguageType;\n\n  fallbackLanguage?: LanguageType;\n\n  loading?: boolean;\n\n  title?: string;\n}\n\nconst initialGlobalState: GlobalState = {\n  language: 'vi',\n  fallbackLanguage: 'vi',\n  loading: true,\n  title: APP_TITLE,\n};\n\nexport default initialGlobalState;\n","export * from 'core/config';\n\nexport const INPUT_DEBOUNCE_TIME: number = 400;\n\nexport const __DEV__: boolean = process.env.NODE_ENV === 'development';\n\nexport const BASE_URL: string = __DEV__ ? window.location.origin : process.env.REACT_APP_BASE_URL;\n\nexport const APP_TITLE: string = process.env.REACT_APP_TITLE ?? '';\n\nexport const COLUMN_WIDTH = {\n  index: 50,\n  checkbox: 50,\n  expand: 50,\n  actions: 100,\n};\n","import initialGlobalState from 'core/config/global';\nimport {InitOptions} from 'i18next';\n\nconst i18nextConfig: InitOptions = {\n  resources: {},\n  lng: initialGlobalState.language,\n  fallbackLng: initialGlobalState.fallbackLanguage,\n  ns: '',\n  defaultNS: '',\n  nsSeparator: false,\n  keySeparator: '.',\n  interpolation: {\n    escapeValue: false,\n    nestingSuffixEscaped: '.',\n    prefix: '{{',\n    suffix: '}}',\n  },\n};\n\nexport default i18nextConfig;\n","import Icon from 'antd/lib/icon';\nimport Layout from 'antd/lib/layout';\nimport Menu from 'antd/lib/menu';\nimport classNames from 'classnames';\nimport {menu} from 'config/menu';\nimport React from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {renderRoutes, RouteConfig, RouteConfigComponentProps} from 'react-router-config';\nimport {NavLink, Switch, withRouter} from 'react-router-dom';\nimport './DefaultLayout.scss';\n\nconst {Header, Sider, Content, Footer} = Layout;\n\nconst {SubMenu} = Menu;\n\nexport interface DefaultLayoutProps extends RouteConfigComponentProps {\n  className?: string;\n\n  headerClassName?: string;\n\n  contentClassName?: string;\n\n  mainClassName?: string;\n\n  title?: string;\n\n  menu?: RouteConfig[];\n}\n\nfunction renderMenu(menu: RouteConfig[], translate: (key: string, data?: any) => string) {\n  return menu.map((item: RouteConfig) => (\n    <React.Fragment key={item.path as string}>\n      <NavLink\n        to={item.path as string}\n        className=\"ant-menu-item\"\n        activeClassName=\"ant-menu-item-selected\"\n        exact={item.exact}\n        role=\"menuitem\"\n      >\n        {item.icon && (\n          <Icon type={item.icon}/>\n        )}\n        {item.matIcon && (\n          <i className=\"material-icons\">{item.matIcon}</i>\n        )}\n        {translate(item.title)}\n      </NavLink>\n      {item?.children && (\n        <SubMenu title={item.title}>\n          {renderMenu(item.children, translate)}\n        </SubMenu>\n      )}\n    </React.Fragment>\n  ));\n}\n\nfunction DefaultLayout(props: DefaultLayoutProps) {\n  const {route, className, contentClassName, headerClassName, mainClassName, menu, title} = props;\n  const [translate] = useTranslation();\n\n  return (\n    <Layout className={classNames('default-layout', className)}>\n      <Header className={headerClassName}>\n        <div className=\"logo\">\n          {title}\n        </div>\n      </Header>\n      <Layout className={mainClassName}>\n        <Sider theme=\"light\">\n          <Menu mode=\"inline\" theme=\"light\">\n            {renderMenu(menu, translate)}\n          </Menu>\n        </Sider>\n        <Content className={contentClassName}>\n          <Switch>\n            {renderRoutes(route?.routes)}\n          </Switch>\n          <Footer/>\n        </Content>\n      </Layout>\n    </Layout>\n  );\n}\n\nDefaultLayout.defaultProps = {\n  menu,\n};\n\nexport default withRouter(DefaultLayout);\n","import {RouteConfig} from 'react-router-config';\n\nexport const menu: RouteConfig[] = [];\n","import {ROOT_ROUTE} from 'config/route-consts';\nimport DefaultLayout from 'layouts/DefaultLayout/DefaultLayout';\nimport {RouteConfig} from 'react-router-config';\n\nexport const routes: RouteConfig[] = [\n  {\n    path: ROOT_ROUTE,\n    component: DefaultLayout,\n    routes: [],\n  },\n];\n","export const ROOT_ROUTE: string = '/';\n","import {GlobalState} from 'config/consts';\nimport {renderRoutes, RouteConfig} from 'react-router-config';\nimport {Switch} from 'react-router-dom';\nimport React from 'reactn';\n\nexport interface AppProps {\n  routes?: RouteConfig[];\n}\n\nfunction App(props: AppProps) {\n  const {routes} = props;\n\n  const [title] = React.useGlobal<GlobalState, 'title'>('title');\n\n  React.useEffect(\n    () => {\n      document.title = title;\n    },\n    [title],\n  );\n\n  return (\n    <Switch>\n      {renderRoutes(routes)}\n    </Switch>\n  );\n}\n\nexport default App;\n","import Spin from 'antd/lib/spin';\nimport {GlobalState} from 'core/config/global';\nimport {ReactNode} from 'react';\nimport React, {useGlobal} from 'reactn';\n\ninterface AppLoadingProps {\n  children?: ReactNode | ReactNode[];\n}\n\nfunction AppLoading(props: AppLoadingProps) {\n  const [loading, setLoading] = useGlobal<GlobalState>('loading');\n  const {children} = props;\n\n  React.useEffect(\n    () => {\n      setLoading(false);\n    },\n    [setLoading],\n  );\n\n  return (\n    <Spin spinning={loading as boolean}>\n      {children}\n    </Spin>\n  );\n}\n\nexport default AppLoading;\n","import axios, {AxiosResponse} from 'axios';\nimport {GlobalState, LanguageType} from 'core/config/global';\nimport i18next from 'i18next';\nimport {join} from 'path';\nimport {setGlobal} from 'reactn';\n\nexport async function changeLanguage(language: LanguageType) {\n  await setGlobal<GlobalState>({\n    loading: true,\n  });\n  await axios.get(join('/i18n', `${language}.json`))\n    .then(async (response: AxiosResponse<any>) => {\n      await i18next.addResource(language, '', '', response.data);\n      await i18next.changeLanguage(language);\n      await setGlobal<GlobalState>({\n        language,\n      });\n    });\n}\n","/* tslint:disable:no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import initialI18NextConfig from 'config/i18next';\nimport {routes} from 'config/routes';\nimport App from 'core/components/App/App';\nimport AppLoading from 'core/components/AppLoading/AppLoading';\nimport initialGlobalState, {GlobalState} from 'core/config/global';\nimport {changeLanguage} from 'core/helpers';\nimport i18next from 'i18next';\nimport ReactDOM from 'react-dom';\nimport {initReactI18next} from 'react-i18next';\nimport {BrowserRouter} from 'react-router-dom';\nimport React, {setGlobal} from 'reactn';\nimport * as serviceWorker from 'service-worker';\nimport 'styles';\n\nPromise.all([\n  i18next.use(initReactI18next)\n    .init(initialI18NextConfig)\n    .then(() => {\n      return changeLanguage('vi');\n    }),\n  setGlobal<GlobalState>(initialGlobalState),\n])\n  .then(() => {\n    const root: HTMLDivElement = document.getElementById('root') as HTMLDivElement;\n    (root.hasChildNodes() ? ReactDOM.hydrate : ReactDOM.render)(\n      <BrowserRouter>\n        <AppLoading>\n          <App routes={routes}/>\n        </AppLoading>\n      </BrowserRouter>,\n      root,\n    );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n    serviceWorker.unregister();\n  });\n"],"sourceRoot":""}