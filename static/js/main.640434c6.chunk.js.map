{"version":3,"sources":["core/config/consts.ts","core/config/global.ts","core/config/config-tests.ts","config/i18next.ts","layouts/MetronicLayout/MetronicLayout.tsx","views/MetronicViews/ProvinceView/ProvinceDetail/ProvinceDetail.tsx","views/MetronicViews/ProvinceView/ProvinceMaster/ProvinceMaster.tsx","views/MetronicViews/ProvinceView/ProvinceView.tsx","config/routes.tsx","config/route-consts.ts","core/components/App/App.tsx","service-worker.ts","index.tsx","core/helpers/translate.ts","config/consts.ts"],"names":["APP_TITLE","process","DATE_FORMAT","parseInt","INPUT_DEBOUNCE_TIME","TIME_FORMAT","initialGlobalState","language","fallbackLanguage","loading","title","i18n","i18nextConfig","resources","lng","fallbackLng","ns","defaultNS","nsSeparator","keySeparator","interpolation","escapeValue","nestingSuffixEscaped","prefix","suffix","MetronicLayout","ProvinceDetail","ProvinceMaster","withRouter","routes","path","component","props","route","renderRoutes","join","exact","App","React","useGlobal","useEffect","document","Boolean","window","location","hostname","match","Promise","all","i18next","use","initReactI18next","init","initialI18NextConfig","then","a","async","setGlobal","axios","get","response","addResource","data","changeLanguage","root","getElementById","hasChildNodes","ReactDOM","hydrate","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ySAGO,IAeMA,EAAiB,OAAGC,oBAA+B,GAWnDC,GAF2B,EAAGC,SAASF,mKAAYG,oBAAqB,IAElD,cAEtBC,EAAsB,WCVpBC,GDYsB,UAAMJ,EAAN,YAAqBG,GCnBlB,CACtCE,SAAU,KACVC,iBAAkB,KAClBC,SAAS,EACTC,MAAOV,I,QCKMW,EAAf,EAAeA,ICJAC,EAhBoB,CACjCC,UAAW,GACXC,IAAKR,EAAmBC,SACxBQ,YAAaT,EAAmBE,iBAChCQ,GAAI,GACJC,UAAW,GACXC,aAAa,EACbC,aAAc,IACdC,cAAe,CACbC,aAAa,EACbC,qBAAsB,IACtBC,OAAQ,KACRC,OAAQ,O,uBCLGC,MAPf,WACE,OACE,sC,OCKWC,MAPf,WACE,OACE,sC,OCKWC,MAPf,WACE,OACE,sC,sBCUWC,ICPFC,EAAwB,CACnC,CACEC,KCR8B,IDS9BC,UAAWN,EACXI,OAAQ,CACN,CACEC,KCL8B,aDM9BC,UDAOH,aAVf,SAAsBI,GAAmC,IAChDC,EAASD,EAATC,MAEP,OACE,kBAAC,IAAD,MACQ,OAALA,QAAK,IAALA,OAAA,EAAAA,EAAOJ,SAAUK,YAAaD,EAAMJ,YCMnCA,OAAQ,CACN,CACEC,KAAMA,IAAKK,KCTe,aDSM,OAChCJ,UAAWL,GAEb,CACEI,KCb0B,aDc1BC,UAAWJ,EACXS,OAAO,Q,QEIJC,MAnBf,SAAaL,GAAkB,IACtBH,EAAUG,EAAVH,OADqB,EAGZS,IAAMC,UAAgC,SAA/C7B,EAHqB,oBAY5B,OAPA4B,IAAME,WACJ,WACEC,SAAS/B,MAAQA,IAEnB,CAACA,IAID,kBAAC,IAAD,KACGwB,YAAaL,K,qDCVAa,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mCCLJC,QAAQC,IAAI,CACVC,IAAQC,IAAIC,KACTC,KAAKC,GACLC,MAAK,WACJ,OCF+B/C,EDET,KCFrB,EAAAgD,EAAAC,OAAA,kEAAAD,EAAA,MACCE,oBAAuB,CAC3BhD,SAAS,KAFN,yBAAA8C,EAAA,MAICG,IAAMC,IAAIxB,eAAK,QAAD,UAAa5B,EAAb,WACjB+C,MAAK,SAAOM,GAAP,SAAAL,EAAAC,OAAA,kEAAAD,EAAA,MACEN,IAAQY,YAAYtD,EAAU,GAAI,GAAIqD,EAASE,OADjD,yBAAAP,EAAA,MAEEN,IAAQc,eAAexD,IAFzB,yBAAAgD,EAAA,MAGEE,oBAAuB,CAC3BlD,cAJE,yCALH,yCAA8BA,KDInCkD,oBAAuBnD,KAEtBgD,MAAK,WACJ,IAAMU,EAAuBvB,SAASwB,eEnBX,SFoB1BD,EAAKE,gBAAkBC,IAASC,QAAUD,IAASE,QAClD,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAKxC,OAAQA,KAEfmC,GDiHA,kBAAmBM,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAACmB,GAClCA,EAAaC,oB","file":"static/js/main.640434c6.chunk.js","sourcesContent":["import {translate} from 'core/helpers/translate';\nimport {AntSortType, TableKeys} from 'react3l';\n\nexport const defaultKeys: TableKeys = {\n  index: translate('general.keys.index'),\n  actions: translate('general.keys.actions'),\n  checkbox: translate('general.keys.checkbox'),\n  expand: translate('general.keys.expand'),\n};\n\nexport const defaultActions = {\n  add: translate('general.actions.add'),\n};\n\nexport const __DEV__: boolean = process.env.NODE_ENV === 'development';\n\nexport const BASE_URL: string = __DEV__ ? window.location.origin : process.env.REACT_APP_BASE_URL;\n\nexport const APP_TITLE: string = process.env.REACT_APP_TITLE ?? '';\n\nexport const antSortType: AntSortType = {\n  ASC: 'ascend',\n  DESC: 'descend',\n};\n\nexport const DEFAULT_TAKE: number = 10;\n\nexport const INPUT_DEBOUNCE_TIME: number = parseInt(process.env.INPUT_DEBOUNCE_TIME, 10) ?? 400;\n\nexport const DATE_FORMAT: string = 'YYYY-MM-DD';\n\nexport const TIME_FORMAT: string = 'HH:mm:ss';\n\nexport const DATE_TIME_FORMAT: string = `${DATE_FORMAT} ${TIME_FORMAT}`;\n","import {APP_TITLE} from 'core/config/consts';\n\nexport type LanguageType = 'en' | 'vi';\n\nexport interface GlobalState {\n  language?: LanguageType;\n\n  fallbackLanguage?: LanguageType;\n\n  loading?: boolean;\n\n  title?: string;\n}\n\nconst initialGlobalState: GlobalState = {\n  language: 'vi',\n  fallbackLanguage: 'vi',\n  loading: true,\n  title: APP_TITLE,\n};\n\nexport default initialGlobalState;\n","import initialGlobalState, {GlobalState} from 'core/config/global';\nimport i18n from 'i18next';\nimport {initReactI18next} from 'react-i18next';\nimport React from 'reactn';\n\nexport async function configTests() {\n  await Promise.all([\n    React.setGlobal<GlobalState>(initialGlobalState),\n    i18n\n      .use(initReactI18next)\n      .init({\n        fallbackLng: 'en',\n        // have a common namespace used around the full app\n        ns: ['translations'],\n        defaultNS: 'translations',\n        debug: false,\n        interpolation: {\n          escapeValue: false, // not needed for react!!\n        },\n      }),\n  ]);\n}\n\nexport default i18n;\n","import initialGlobalState from 'core/config/global';\nimport {InitOptions} from 'i18next';\n\nconst i18nextConfig: InitOptions = {\n  resources: {},\n  lng: initialGlobalState.language,\n  fallbackLng: initialGlobalState.fallbackLanguage,\n  ns: '',\n  defaultNS: '',\n  nsSeparator: false,\n  keySeparator: '.',\n  interpolation: {\n    escapeValue: false,\n    nestingSuffixEscaped: '.',\n    prefix: '{{',\n    suffix: '}}',\n  },\n};\n\nexport default i18nextConfig;\n","import React from 'react';\nimport './MetronicLayout.scss';\n\nfunction MetronicLayout() {\n  return (\n    <>\n    </>\n  );\n}\n\nexport default MetronicLayout;\n","import React from 'react';\nimport './ProvinceDetail.scss';\n\nfunction ProvinceDetail() {\n  return (\n    <>\n    </>\n  );\n}\n\nexport default ProvinceDetail;\n","import React from 'react';\nimport './ProvinceMaster.scss';\n\nfunction ProvinceMaster() {\n  return (\n    <>\n    </>\n  );\n}\n\nexport default ProvinceMaster;\n","import React from 'react';\nimport {Switch, withRouter} from 'react-router';\nimport {renderRoutes, RouteConfigComponentProps} from 'react-router-config';\nimport './ProvinceView.scss';\n\nfunction ProvinceView(props: RouteConfigComponentProps) {\n  const {route} = props;\n\n  return (\n    <Switch>\n      {route?.routes && renderRoutes(route.routes)}\n    </Switch>\n  );\n}\n\nexport default withRouter(ProvinceView);\n","import {PROVINCE_ROUTE, ROOT_ROUTE} from 'config/route-consts';\nimport MetronicLayout from 'layouts/MetronicLayout/MetronicLayout';\nimport path from 'path';\nimport {RouteConfig} from 'react-router-config';\nimport ProvinceDetail from 'views/MetronicViews/ProvinceView/ProvinceDetail/ProvinceDetail';\nimport ProvinceMaster from 'views/MetronicViews/ProvinceView/ProvinceMaster/ProvinceMaster';\nimport ProvinceView from 'views/MetronicViews/ProvinceView/ProvinceView';\n\nexport const routes: RouteConfig[] = [\n  {\n    path: ROOT_ROUTE,\n    component: MetronicLayout,\n    routes: [\n      {\n        path: PROVINCE_ROUTE,\n        component: ProvinceView,\n        routes: [\n          {\n            path: path.join(PROVINCE_ROUTE, ':id'),\n            component: ProvinceDetail,\n          },\n          {\n            path: PROVINCE_ROUTE,\n            component: ProvinceMaster,\n            exact: true,\n          },\n        ],\n      },\n    ],\n  },\n];\n","export default 'route-consts';\n\nexport const ROOT_ROUTE: string = '/';\n\nexport const ACCOUNT_ROUTE: string = '/accounts';\nexport const DISTRICT_ROUTE: string = '/districts';\nexport const GROUP_ROUTE: string = '/groups';\nexport const ORDER_CONTENT_ROUTE: string = '/orderContents';\nexport const ORDER_ROUTE: string = '/orders';\nexport const PROVINCE_ROUTE: string = '/provinces';\nexport const WARD_ROUTE: string = '/wards';\n","import {GlobalState} from 'core/config';\nimport {renderRoutes, RouteConfig} from 'react-router-config';\nimport {Switch} from 'react-router-dom';\nimport React from 'reactn';\n\nexport interface AppProps {\n  routes?: RouteConfig[];\n}\n\nfunction App(props: AppProps) {\n  const {routes} = props;\n\n  const [title] = React.useGlobal<GlobalState, 'title'>('title');\n\n  React.useEffect(\n    () => {\n      document.title = title;\n    },\n    [title],\n  );\n\n  return (\n    <Switch>\n      {renderRoutes(routes)}\n    </Switch>\n  );\n}\n\nexport default App;\n","/* tslint:disable:no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import {ROOT_ID} from 'config/consts';\nimport initialI18NextConfig from 'config/i18next';\nimport {routes} from 'config/routes';\nimport App from 'core/components/App/App';\nimport initialGlobalState, {GlobalState} from 'core/config/global';\nimport {changeLanguage} from 'core/helpers';\nimport i18next from 'i18next';\nimport ReactDOM from 'react-dom';\nimport {initReactI18next} from 'react-i18next';\nimport {BrowserRouter} from 'react-router-dom';\nimport React, {setGlobal} from 'reactn';\nimport * as serviceWorker from 'service-worker';\nimport 'styles';\n\nPromise.all([\n  i18next.use(initReactI18next)\n    .init(initialI18NextConfig)\n    .then(() => {\n      return changeLanguage('vi');\n    }),\n  setGlobal<GlobalState>(initialGlobalState),\n])\n  .then(() => {\n    const root: HTMLDivElement = document.getElementById(ROOT_ID) as HTMLDivElement;\n    (root.hasChildNodes() ? ReactDOM.hydrate : ReactDOM.render)(\n      <BrowserRouter>\n        <App routes={routes}/>\n      </BrowserRouter>,\n      root,\n    );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n    serviceWorker.unregister();\n  });\n","import axios, {AxiosResponse} from 'axios';\nimport {GlobalState, LanguageType} from 'core/config';\nimport i18next from 'i18next';\nimport {join} from 'path';\nimport {setGlobal} from 'reactn';\n\n/**\n * Translate marker\n *\n * @param {string} input\n * @returns {string}\n */\nexport function translate(input: string) {\n  return input;\n}\n\nexport async function changeLanguage(language: LanguageType) {\n  await setGlobal<GlobalState>({\n    loading: true,\n  });\n  await axios.get(join('/i18n', `${language}.json`))\n    .then(async (response: AxiosResponse<any>) => {\n      await i18next.addResource(language, '', '', response.data);\n      await i18next.changeLanguage(language);\n      await setGlobal<GlobalState>({\n        language,\n      });\n    });\n}\n","import {ColumnWidth} from 'react3l';\n\nexport * from 'core/config';\n\nexport const ROOT_ID: string = 'root';\n\nexport const defaultColumnWidth: ColumnWidth = {\n  index: 50,\n  checkbox: 50,\n  expand: 50,\n  actions: 100,\n};\n"],"sourceRoot":""}